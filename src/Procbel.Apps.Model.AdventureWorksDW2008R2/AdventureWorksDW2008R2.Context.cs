//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Procbel.Apps.Model.AdventureWorksDW2008R2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AdventureWorksDW2008R2Entities : DbContext
    {
        public AdventureWorksDW2008R2Entities()
            : base("name=AdventureWorksDW2008R2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DatabaseLog> DatabaseLog { get; set; }
        public DbSet<DimAccount> DimAccount { get; set; }
        public DbSet<DimCurrency> DimCurrency { get; set; }
        public DbSet<DimCustomer> DimCustomer { get; set; }
        public DbSet<DimDate> DimDate { get; set; }
        public DbSet<DimDepartmentGroup> DimDepartmentGroup { get; set; }
        public DbSet<DimEmployee> DimEmployee { get; set; }
        public DbSet<DimGeography> DimGeography { get; set; }
        public DbSet<DimOrganization> DimOrganization { get; set; }
        public DbSet<DimProduct> DimProduct { get; set; }
        public DbSet<DimProductCategory> DimProductCategory { get; set; }
        public DbSet<DimProductSubcategory> DimProductSubcategory { get; set; }
        public DbSet<DimPromotion> DimPromotion { get; set; }
        public DbSet<DimReseller> DimReseller { get; set; }
        public DbSet<DimSalesReason> DimSalesReason { get; set; }
        public DbSet<DimSalesTerritory> DimSalesTerritory { get; set; }
        public DbSet<DimScenario> DimScenario { get; set; }
        public DbSet<FactAdditionalInternationalProductDescription> FactAdditionalInternationalProductDescription { get; set; }
        public DbSet<FactCallCenter> FactCallCenter { get; set; }
        public DbSet<FactCurrencyRate> FactCurrencyRate { get; set; }
        public DbSet<FactFinance> FactFinance { get; set; }
        public DbSet<FactInternetSales> FactInternetSales { get; set; }
        public DbSet<FactResellerSales> FactResellerSales { get; set; }
        public DbSet<FactSalesQuota> FactSalesQuota { get; set; }
        public DbSet<FactSurveyResponse> FactSurveyResponse { get; set; }
        public DbSet<ProspectiveBuyer> ProspectiveBuyer { get; set; }
        public DbSet<vAssocSeqLineItems> vAssocSeqLineItems { get; set; }
        public DbSet<vAssocSeqOrders> vAssocSeqOrders { get; set; }
        public DbSet<vDMPrep> vDMPrep { get; set; }
        public DbSet<vTargetMail> vTargetMail { get; set; }
        public DbSet<vTimeSeries> vTimeSeries { get; set; }
    
        public virtual ObjectResult<spFinanceData_Result> spFinanceData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFinanceData_Result>("spFinanceData");
        }
    
        public virtual int spSalesByRegion(string territoryList, string categoryList)
        {
            var territoryListParameter = territoryList != null ?
                new ObjectParameter("TerritoryList", territoryList) :
                new ObjectParameter("TerritoryList", typeof(string));
    
            var categoryListParameter = categoryList != null ?
                new ObjectParameter("CategoryList", categoryList) :
                new ObjectParameter("CategoryList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSalesByRegion", territoryListParameter, categoryListParameter);
        }
    
        public virtual int spTopUsInternetCustomers(Nullable<System.DateTime> dateTimeStart, Nullable<System.DateTime> dateTimeEnd, string territoryList, string categoryList)
        {
            var dateTimeStartParameter = dateTimeStart.HasValue ?
                new ObjectParameter("DateTimeStart", dateTimeStart) :
                new ObjectParameter("DateTimeStart", typeof(System.DateTime));
    
            var dateTimeEndParameter = dateTimeEnd.HasValue ?
                new ObjectParameter("DateTimeEnd", dateTimeEnd) :
                new ObjectParameter("DateTimeEnd", typeof(System.DateTime));
    
            var territoryListParameter = territoryList != null ?
                new ObjectParameter("TerritoryList", territoryList) :
                new ObjectParameter("TerritoryList", typeof(string));
    
            var categoryListParameter = categoryList != null ?
                new ObjectParameter("CategoryList", categoryList) :
                new ObjectParameter("CategoryList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTopUsInternetCustomers", dateTimeStartParameter, dateTimeEndParameter, territoryListParameter, categoryListParameter);
        }
    
        public virtual int spTopUsInternetProducts(Nullable<System.DateTime> dateTimeStart, Nullable<System.DateTime> dateTimeEnd, string territoryList, string categoryList)
        {
            var dateTimeStartParameter = dateTimeStart.HasValue ?
                new ObjectParameter("DateTimeStart", dateTimeStart) :
                new ObjectParameter("DateTimeStart", typeof(System.DateTime));
    
            var dateTimeEndParameter = dateTimeEnd.HasValue ?
                new ObjectParameter("DateTimeEnd", dateTimeEnd) :
                new ObjectParameter("DateTimeEnd", typeof(System.DateTime));
    
            var territoryListParameter = territoryList != null ?
                new ObjectParameter("TerritoryList", territoryList) :
                new ObjectParameter("TerritoryList", typeof(string));
    
            var categoryListParameter = categoryList != null ?
                new ObjectParameter("CategoryList", categoryList) :
                new ObjectParameter("CategoryList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTopUsInternetProducts", dateTimeStartParameter, dateTimeEndParameter, territoryListParameter, categoryListParameter);
        }
    }
}
