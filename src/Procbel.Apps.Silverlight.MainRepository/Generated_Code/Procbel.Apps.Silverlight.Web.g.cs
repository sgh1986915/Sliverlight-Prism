//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Procbel.Apps.Model.CRM
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Activity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Activity : Entity
    {
        
        private int _activityID;
        
        private Nullable<DateTime> _dateCreated;
        
        private string _description;
        
        private Nullable<DateTime> _dueDate;
        
        private EntityRef<Employee> _employee;
        
        private Nullable<int> _employeeID;
        
        private bool _isOverdue;
        
        private string _notes;
        
        private EntityRef<Opportunity> _opportunity;
        
        private Nullable<int> _opportunityID;
        
        private Nullable<int> _priority;
        
        private PriorityType _priorityType;
        
        private Nullable<int> _status;
        
        private ActivityStatusType _statusType;
        
        private Nullable<int> _type;
        
        private ActivityType _typeAsEnum;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActivityIDChanging(int value);
        partial void OnActivityIDChanged();
        partial void OnDateCreatedChanging(Nullable<DateTime> value);
        partial void OnDateCreatedChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnEmployeeIDChanging(Nullable<int> value);
        partial void OnEmployeeIDChanged();
        partial void OnIsOverdueChanging(bool value);
        partial void OnIsOverdueChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnOpportunityIDChanging(Nullable<int> value);
        partial void OnOpportunityIDChanged();
        partial void OnPriorityChanging(Nullable<int> value);
        partial void OnPriorityChanged();
        partial void OnPriorityTypeChanging(PriorityType value);
        partial void OnPriorityTypeChanged();
        partial void OnStatusChanging(Nullable<int> value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(ActivityStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnTypeChanging(Nullable<int> value);
        partial void OnTypeChanged();
        partial void OnTypeAsEnumChanging(ActivityType value);
        partial void OnTypeAsEnumChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity"/> class.
        /// </summary>
        public Activity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActivityID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ActivityID
        {
            get
            {
                return this._activityID;
            }
            set
            {
                if ((this._activityID != value))
                {
                    this.OnActivityIDChanging(value);
                    this.ValidateProperty("ActivityID", value);
                    this._activityID = value;
                    this.RaisePropertyChanged("ActivityID");
                    this.OnActivityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateCreated' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateCreated
        {
            get
            {
                return this._dateCreated;
            }
            set
            {
                if ((this._dateCreated != value))
                {
                    this.OnDateCreatedChanging(value);
                    this.RaiseDataMemberChanging("DateCreated");
                    this.ValidateProperty("DateCreated", value);
                    this._dateCreated = value;
                    this.RaiseDataMemberChanged("DateCreated");
                    this.OnDateCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Employee"/> entity.
        /// </summary>
        [Association("Employee_Activity", "EmployeeID", "EmployeeID", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityRef<Employee>(this, "Employee", this.FilterEmployee);
                }
                return this._employee.Entity;
            }
            set
            {
                Employee previous = this.Employee;
                if ((previous != value))
                {
                    this.ValidateProperty("Employee", value);
                    if ((previous != null))
                    {
                        this._employee.Entity = null;
                        previous.Activity.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EmployeeID = value.EmployeeID;
                    }
                    else
                    {
                        this.EmployeeID = default(Nullable<int>);
                    }
                    this._employee.Entity = value;
                    if ((value != null))
                    {
                        value.Activity.Add(this);
                    }
                    this.RaisePropertyChanged("Employee");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOverdue' value.
        /// </summary>
        [DataMember()]
        public bool IsOverdue
        {
            get
            {
                return this._isOverdue;
            }
            set
            {
                if ((this._isOverdue != value))
                {
                    this.OnIsOverdueChanging(value);
                    this.RaiseDataMemberChanging("IsOverdue");
                    this.ValidateProperty("IsOverdue", value);
                    this._isOverdue = value;
                    this.RaiseDataMemberChanged("IsOverdue");
                    this.OnIsOverdueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Opportunity"/> entity.
        /// </summary>
        [Association("Activities-opportunity-association", "OpportunityID", "OpportunityID")]
        public Opportunity Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityRef<Opportunity>(this, "Opportunity", this.FilterOpportunity);
                }
                return this._opportunity.Entity;
            }
            set
            {
                Opportunity previous = this.Opportunity;
                if ((previous != value))
                {
                    this.ValidateProperty("Opportunity", value);
                    this._opportunity.Entity = value;
                    this.RaisePropertyChanged("Opportunity");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpportunityID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> OpportunityID
        {
            get
            {
                return this._opportunityID;
            }
            set
            {
                if ((this._opportunityID != value))
                {
                    this.OnOpportunityIDChanging(value);
                    this.RaiseDataMemberChanging("OpportunityID");
                    this.ValidateProperty("OpportunityID", value);
                    this._opportunityID = value;
                    this.RaiseDataMemberChanged("OpportunityID");
                    this.OnOpportunityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PriorityType' value.
        /// </summary>
        [DataMember()]
        public PriorityType PriorityType
        {
            get
            {
                return this._priorityType;
            }
            set
            {
                if ((this._priorityType != value))
                {
                    this.OnPriorityTypeChanging(value);
                    this.RaiseDataMemberChanging("PriorityType");
                    this.ValidateProperty("PriorityType", value);
                    this._priorityType = value;
                    this.RaiseDataMemberChanged("PriorityType");
                    this.OnPriorityTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public ActivityStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeAsEnum' value.
        /// </summary>
        [DataMember()]
        public ActivityType TypeAsEnum
        {
            get
            {
                return this._typeAsEnum;
            }
            set
            {
                if ((this._typeAsEnum != value))
                {
                    this.OnTypeAsEnumChanging(value);
                    this.RaiseDataMemberChanging("TypeAsEnum");
                    this.ValidateProperty("TypeAsEnum", value);
                    this._typeAsEnum = value;
                    this.RaiseDataMemberChanged("TypeAsEnum");
                    this.OnTypeAsEnumChanged();
                }
            }
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.EmployeeID == this.EmployeeID);
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.OpportunityID == this.OpportunityID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._activityID;
        }
    }
    
    public enum ActivityStatusType
    {
        
        NotStarted = 0,
        
        InProgress = 1,
        
        Done = 2,
    }
    
    public enum ActivityType
    {
        
        Mail = 0,
        
        Call = 1,
        
        Meet = 2,
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Company : Entity
    {
        
        private string _address;
        
        private string _city;
        
        private int _companyID;
        
        private EntityCollection<Contact> _contact;
        
        private string _country;
        
        private EntityRef<Image> _image;
        
        private Nullable<int> _imageID;
        
        private string _industry;
        
        private Nullable<bool> _isActive;
        
        private string _name;
        
        private string _nasdaq;
        
        private string _notes;
        
        private EntityCollection<Opportunity> _opportunity;
        
        private string _postcode;
        
        private Nullable<decimal> _revenue;
        
        private EntityCollection<SalesTrend> _salesTrend;
        
        private string _state;
        
        private string _website;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(int value);
        partial void OnCompanyIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnImageIDChanging(Nullable<int> value);
        partial void OnImageIDChanged();
        partial void OnIndustryChanging(string value);
        partial void OnIndustryChanged();
        partial void OnIsActiveChanging(Nullable<bool> value);
        partial void OnIsActiveChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNASDAQChanging(string value);
        partial void OnNASDAQChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnRevenueChanging(Nullable<decimal> value);
        partial void OnRevenueChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnWebsiteChanging(string value);
        partial void OnWebsiteChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Contact"/> entity instances.
        /// </summary>
        [Association("Company_Contact", "CompanyID", "CompanyID")]
        public EntityCollection<Contact> Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityCollection<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Company-image-association", "ImageID", "ImageID")]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    this._image.Entity = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Industry' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Industry
        {
            get
            {
                return this._industry;
            }
            set
            {
                if ((this._industry != value))
                {
                    this.OnIndustryChanging(value);
                    this.RaiseDataMemberChanging("Industry");
                    this.ValidateProperty("Industry", value);
                    this._industry = value;
                    this.RaiseDataMemberChanged("Industry");
                    this.OnIndustryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NASDAQ' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string NASDAQ
        {
            get
            {
                return this._nasdaq;
            }
            set
            {
                if ((this._nasdaq != value))
                {
                    this.OnNASDAQChanging(value);
                    this.RaiseDataMemberChanging("NASDAQ");
                    this.ValidateProperty("NASDAQ", value);
                    this._nasdaq = value;
                    this.RaiseDataMemberChanged("NASDAQ");
                    this.OnNASDAQChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Opportunity"/> entity instances.
        /// </summary>
        [Association("Company_Opportunity", "CompanyID", "CompanyID")]
        public EntityCollection<Opportunity> Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityCollection<Opportunity>(this, "Opportunity", this.FilterOpportunity, this.AttachOpportunity, this.DetachOpportunity);
                }
                return this._opportunity;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Postcode' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Postcode
        {
            get
            {
                return this._postcode;
            }
            set
            {
                if ((this._postcode != value))
                {
                    this.OnPostcodeChanging(value);
                    this.RaiseDataMemberChanging("Postcode");
                    this.ValidateProperty("Postcode", value);
                    this._postcode = value;
                    this.RaiseDataMemberChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Revenue' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public Nullable<decimal> Revenue
        {
            get
            {
                return this._revenue;
            }
            set
            {
                if ((this._revenue != value))
                {
                    this.OnRevenueChanging(value);
                    this.RaiseDataMemberChanging("Revenue");
                    this.ValidateProperty("Revenue", value);
                    this._revenue = value;
                    this.RaiseDataMemberChanged("Revenue");
                    this.OnRevenueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesTrend"/> entity instances.
        /// </summary>
        [Association("Company_SalesTrend", "CompanyID", "CompanyID")]
        public EntityCollection<SalesTrend> SalesTrend
        {
            get
            {
                if ((this._salesTrend == null))
                {
                    this._salesTrend = new EntityCollection<SalesTrend>(this, "SalesTrend", this.FilterSalesTrend, this.AttachSalesTrend, this.DetachSalesTrend);
                }
                return this._salesTrend;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Website' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Website
        {
            get
            {
                return this._website;
            }
            set
            {
                if ((this._website != value))
                {
                    this.OnWebsiteChanging(value);
                    this.RaiseDataMemberChanging("Website");
                    this.ValidateProperty("Website", value);
                    this._website = value;
                    this.RaiseDataMemberChanged("Website");
                    this.OnWebsiteChanged();
                }
            }
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        private void AttachOpportunity(Opportunity entity)
        {
            entity.Company = this;
        }
        
        private void DetachOpportunity(Opportunity entity)
        {
            entity.Company = null;
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSalesTrend(SalesTrend entity)
        {
            entity.Company = this;
        }
        
        private void DetachSalesTrend(SalesTrend entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSalesTrend(SalesTrend entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'Contact' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Contact : Entity
    {
        
        private string _address;
        
        private Nullable<DateTime> _birthday;
        
        private string _blog;
        
        private string _city;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyID;
        
        private int _contactID;
        
        private string _country;
        
        private string _division;
        
        private string _email;
        
        private string _facebook;
        
        private string _googlePlus;
        
        private EntityRef<Image> _image;
        
        private Nullable<int> _imageID;
        
        private Nullable<bool> _isActive;
        
        private Nullable<bool> _isEmployee;
        
        private Nullable<bool> _isImportantPerson;
        
        private Nullable<bool> _isMale;
        
        private string _name;
        
        private string _notes;
        
        private EntityCollection<Opportunity> _opportunity;
        
        private string _phone;
        
        private string _position;
        
        private string _postcode;
        
        private string _state;
        
        private string _twitter;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBirthdayChanging(Nullable<DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnBlogChanging(string value);
        partial void OnBlogChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnDivisionChanging(string value);
        partial void OnDivisionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFacebookChanging(string value);
        partial void OnFacebookChanged();
        partial void OnGooglePlusChanging(string value);
        partial void OnGooglePlusChanged();
        partial void OnImageIDChanging(Nullable<int> value);
        partial void OnImageIDChanged();
        partial void OnIsActiveChanging(Nullable<bool> value);
        partial void OnIsActiveChanged();
        partial void OnIsEmployeeChanging(Nullable<bool> value);
        partial void OnIsEmployeeChanged();
        partial void OnIsImportantPersonChanging(Nullable<bool> value);
        partial void OnIsImportantPersonChanged();
        partial void OnIsMaleChanging(Nullable<bool> value);
        partial void OnIsMaleChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnTwitterChanging(string value);
        partial void OnTwitterChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact"/> class.
        /// </summary>
        public Contact()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Birthday' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Birthday
        {
            get
            {
                return this._birthday;
            }
            set
            {
                if ((this._birthday != value))
                {
                    this.OnBirthdayChanging(value);
                    this.RaiseDataMemberChanging("Birthday");
                    this.ValidateProperty("Birthday", value);
                    this._birthday = value;
                    this.RaiseDataMemberChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Blog' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Blog
        {
            get
            {
                return this._blog;
            }
            set
            {
                if ((this._blog != value))
                {
                    this.OnBlogChanging(value);
                    this.RaiseDataMemberChanging("Blog");
                    this.ValidateProperty("Blog", value);
                    this._blog = value;
                    this.RaiseDataMemberChanged("Blog");
                    this.OnBlogChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Contacts-company-association", "CompanyID", "CompanyID")]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    this._company.Entity = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaisePropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Division' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Division
        {
            get
            {
                return this._division;
            }
            set
            {
                if ((this._division != value))
                {
                    this.OnDivisionChanging(value);
                    this.RaiseDataMemberChanging("Division");
                    this.ValidateProperty("Division", value);
                    this._division = value;
                    this.RaiseDataMemberChanged("Division");
                    this.OnDivisionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Facebook' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Facebook
        {
            get
            {
                return this._facebook;
            }
            set
            {
                if ((this._facebook != value))
                {
                    this.OnFacebookChanging(value);
                    this.RaiseDataMemberChanging("Facebook");
                    this.ValidateProperty("Facebook", value);
                    this._facebook = value;
                    this.RaiseDataMemberChanged("Facebook");
                    this.OnFacebookChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GooglePlus' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string GooglePlus
        {
            get
            {
                return this._googlePlus;
            }
            set
            {
                if ((this._googlePlus != value))
                {
                    this.OnGooglePlusChanging(value);
                    this.RaiseDataMemberChanging("GooglePlus");
                    this.ValidateProperty("GooglePlus", value);
                    this._googlePlus = value;
                    this.RaiseDataMemberChanged("GooglePlus");
                    this.OnGooglePlusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Contacts-image-association", "ImageID", "ImageID")]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    this._image.Entity = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsEmployee' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsEmployee
        {
            get
            {
                return this._isEmployee;
            }
            set
            {
                if ((this._isEmployee != value))
                {
                    this.OnIsEmployeeChanging(value);
                    this.RaiseDataMemberChanging("IsEmployee");
                    this.ValidateProperty("IsEmployee", value);
                    this._isEmployee = value;
                    this.RaiseDataMemberChanged("IsEmployee");
                    this.OnIsEmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsImportantPerson' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsImportantPerson
        {
            get
            {
                return this._isImportantPerson;
            }
            set
            {
                if ((this._isImportantPerson != value))
                {
                    this.OnIsImportantPersonChanging(value);
                    this.RaiseDataMemberChanging("IsImportantPerson");
                    this.ValidateProperty("IsImportantPerson", value);
                    this._isImportantPerson = value;
                    this.RaiseDataMemberChanged("IsImportantPerson");
                    this.OnIsImportantPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsMale' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsMale
        {
            get
            {
                return this._isMale;
            }
            set
            {
                if ((this._isMale != value))
                {
                    this.OnIsMaleChanging(value);
                    this.RaiseDataMemberChanging("IsMale");
                    this.ValidateProperty("IsMale", value);
                    this._isMale = value;
                    this.RaiseDataMemberChanged("IsMale");
                    this.OnIsMaleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Opportunity"/> entity instances.
        /// </summary>
        [Association("Contact_Opportunity", "ContactID", "ContactID")]
        public EntityCollection<Opportunity> Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityCollection<Opportunity>(this, "Opportunity", this.FilterOpportunity);
                }
                return this._opportunity;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Position' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    this.OnPositionChanging(value);
                    this.RaiseDataMemberChanging("Position");
                    this.ValidateProperty("Position", value);
                    this._position = value;
                    this.RaiseDataMemberChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Postcode' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Postcode
        {
            get
            {
                return this._postcode;
            }
            set
            {
                if ((this._postcode != value))
                {
                    this.OnPostcodeChanging(value);
                    this.RaiseDataMemberChanging("Postcode");
                    this.ValidateProperty("Postcode", value);
                    this._postcode = value;
                    this.RaiseDataMemberChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Twitter' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Twitter
        {
            get
            {
                return this._twitter;
            }
            set
            {
                if ((this._twitter != value))
                {
                    this.OnTwitterChanging(value);
                    this.RaiseDataMemberChanging("Twitter");
                    this.ValidateProperty("Twitter", value);
                    this._twitter = value;
                    this.RaiseDataMemberChanged("Twitter");
                    this.OnTwitterChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.ContactID == this.ContactID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._contactID;
        }
    }
    
    /// <summary>
    /// The 'ContactsMetadata' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class ContactsMetadata : ComplexObject
    {
        
        private int _activeContacts;
        
        private int _allContacts;
        
        private int _importantContacts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveContactsChanging(int value);
        partial void OnActiveContactsChanged();
        partial void OnAllContactsChanging(int value);
        partial void OnAllContactsChanged();
        partial void OnImportantContactsChanging(int value);
        partial void OnImportantContactsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsMetadata"/> class.
        /// </summary>
        public ContactsMetadata()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActiveContacts' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ActiveContacts
        {
            get
            {
                return this._activeContacts;
            }
            set
            {
                if ((this._activeContacts != value))
                {
                    this.OnActiveContactsChanging(value);
                    this.ValidateProperty("ActiveContacts", value);
                    this._activeContacts = value;
                    this.RaisePropertyChanged("ActiveContacts");
                    this.OnActiveContactsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllContacts' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int AllContacts
        {
            get
            {
                return this._allContacts;
            }
            set
            {
                if ((this._allContacts != value))
                {
                    this.OnAllContactsChanging(value);
                    this.ValidateProperty("AllContacts", value);
                    this._allContacts = value;
                    this.RaisePropertyChanged("AllContacts");
                    this.OnAllContactsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImportantContacts' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ImportantContacts
        {
            get
            {
                return this._importantContacts;
            }
            set
            {
                if ((this._importantContacts != value))
                {
                    this.OnImportantContactsChanging(value);
                    this.ValidateProperty("ImportantContacts", value);
                    this._importantContacts = value;
                    this.RaisePropertyChanged("ImportantContacts");
                    this.OnImportantContactsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Employee : Entity
    {
        
        private EntityCollection<Activity> _activity;
        
        private string _email;
        
        private int _employeeID;
        
        private EntityRef<Image> _image;
        
        private Nullable<int> _imageID;
        
        private Nullable<bool> _isActive;
        
        private string _name;
        
        private string _phone;
        
        private string _position;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmployeeIDChanging(int value);
        partial void OnEmployeeIDChanged();
        partial void OnImageIDChanging(Nullable<int> value);
        partial void OnImageIDChanged();
        partial void OnIsActiveChanging(Nullable<bool> value);
        partial void OnIsActiveChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Activity"/> entity instances.
        /// </summary>
        [Association("Employee_Activity", "EmployeeID", "EmployeeID")]
        public EntityCollection<Activity> Activity
        {
            get
            {
                if ((this._activity == null))
                {
                    this._activity = new EntityCollection<Activity>(this, "Activity", this.FilterActivity, this.AttachActivity, this.DetachActivity);
                }
                return this._activity;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaisePropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Image_Employee", "ImageID", "ImageID", IsForeignKey=true)]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    if ((previous != null))
                    {
                        this._image.Entity = null;
                        previous.Employee.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ImageID = value.ImageID;
                    }
                    else
                    {
                        this.ImageID = default(Nullable<int>);
                    }
                    this._image.Entity = value;
                    if ((value != null))
                    {
                        value.Employee.Add(this);
                    }
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Position' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    this.OnPositionChanging(value);
                    this.RaiseDataMemberChanging("Position");
                    this.ValidateProperty("Position", value);
                    this._position = value;
                    this.RaiseDataMemberChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }
        
        private void AttachActivity(Activity entity)
        {
            entity.Employee = this;
        }
        
        private void DetachActivity(Activity entity)
        {
            entity.Employee = null;
        }
        
        private bool FilterActivity(Activity entity)
        {
            return (entity.EmployeeID == this.EmployeeID);
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._employeeID;
        }
    }
    
    /// <summary>
    /// The 'Image' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Image : Entity
    {
        
        private EntityCollection<Company> _company;
        
        private EntityCollection<Contact> _contact;
        
        private EntityCollection<Employee> _employee;
        
        private int _imageID;
        
        private string _imagePath;
        
        private EntityCollection<Product> _product;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnImageIDChanging(int value);
        partial void OnImageIDChanged();
        partial void OnImagePathChanging(string value);
        partial void OnImagePathChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Image"/> class.
        /// </summary>
        public Image()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Company"/> entity instances.
        /// </summary>
        [Association("Image_Company", "ImageID", "ImageID")]
        public EntityCollection<Company> Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityCollection<Company>(this, "Company", this.FilterCompany);
                }
                return this._company;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Contact"/> entity instances.
        /// </summary>
        [Association("Image_Contact", "ImageID", "ImageID")]
        public EntityCollection<Contact> Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityCollection<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("Image_Employee", "ImageID", "ImageID")]
        public EntityCollection<Employee> Employee
        {
            get
            {
                if ((this._employee == null))
                {
                    this._employee = new EntityCollection<Employee>(this, "Employee", this.FilterEmployee, this.AttachEmployee, this.DetachEmployee);
                }
                return this._employee;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaisePropertyChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImagePath' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(300)]
        public string ImagePath
        {
            get
            {
                return this._imagePath;
            }
            set
            {
                if ((this._imagePath != value))
                {
                    this.OnImagePathChanging(value);
                    this.RaiseDataMemberChanging("ImagePath");
                    this.ValidateProperty("ImagePath", value);
                    this._imagePath = value;
                    this.RaiseDataMemberChanged("ImagePath");
                    this.OnImagePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Product"/> entity instances.
        /// </summary>
        [Association("Image_Product", "ImageID", "ImageID")]
        public EntityCollection<Product> Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityCollection<Product>(this, "Product", this.FilterProduct);
                }
                return this._product;
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        private void AttachEmployee(Employee entity)
        {
            entity.Image = this;
        }
        
        private void DetachEmployee(Employee entity)
        {
            entity.Image = null;
        }
        
        private bool FilterEmployee(Employee entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._imageID;
        }
    }
    
    /// <summary>
    /// The 'Opportunity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Opportunity : Entity
    {
        
        private EntityCollection<Activity> _activity;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyID;
        
        private EntityRef<Contact> _contact;
        
        private Nullable<int> _contactID;
        
        private Nullable<DateTime> _dateCreated;
        
        private string _description;
        
        private Nullable<int> _discountPercent;
        
        private string _discountReason;
        
        private Nullable<DateTime> _estimationCloseDate;
        
        private bool _isOverdue;
        
        private string _lead;
        
        private int _opportunityID;
        
        private Nullable<decimal> _price;
        
        private Nullable<int> _priority;
        
        private PriorityType _priorityType;
        
        private EntityRef<Product> _product;
        
        private Nullable<int> _productID;
        
        private Nullable<int> _quantity;
        
        private Nullable<int> _stage;
        
        private OpportunityStageType _stageType;
        
        private Nullable<int> _status;
        
        private OpportunityStatusType _statusType;
        
        private Nullable<int> _successProbability;
        
        private decimal _totalPrice;
        
        private string _wonLostReason;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactIDChanging(Nullable<int> value);
        partial void OnContactIDChanged();
        partial void OnDateCreatedChanging(Nullable<DateTime> value);
        partial void OnDateCreatedChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDiscountPercentChanging(Nullable<int> value);
        partial void OnDiscountPercentChanged();
        partial void OnDiscountReasonChanging(string value);
        partial void OnDiscountReasonChanged();
        partial void OnEstimationCloseDateChanging(Nullable<DateTime> value);
        partial void OnEstimationCloseDateChanged();
        partial void OnIsOverdueChanging(bool value);
        partial void OnIsOverdueChanged();
        partial void OnLeadChanging(string value);
        partial void OnLeadChanged();
        partial void OnOpportunityIDChanging(int value);
        partial void OnOpportunityIDChanged();
        partial void OnPriceChanging(Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnPriorityChanging(Nullable<int> value);
        partial void OnPriorityChanged();
        partial void OnPriorityTypeChanging(PriorityType value);
        partial void OnPriorityTypeChanged();
        partial void OnProductIDChanging(Nullable<int> value);
        partial void OnProductIDChanged();
        partial void OnQuantityChanging(Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnStageChanging(Nullable<int> value);
        partial void OnStageChanged();
        partial void OnStageTypeChanging(OpportunityStageType value);
        partial void OnStageTypeChanged();
        partial void OnStatusChanging(Nullable<int> value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(OpportunityStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnSuccessProbabilityChanging(Nullable<int> value);
        partial void OnSuccessProbabilityChanged();
        partial void OnTotalPriceChanging(decimal value);
        partial void OnTotalPriceChanged();
        partial void OnWonLostReasonChanging(string value);
        partial void OnWonLostReasonChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Opportunity"/> class.
        /// </summary>
        public Opportunity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Activity"/> entity instances.
        /// </summary>
        [Association("Opportunity_Activity", "OpportunityID", "OpportunityID")]
        public EntityCollection<Activity> Activity
        {
            get
            {
                if ((this._activity == null))
                {
                    this._activity = new EntityCollection<Activity>(this, "Activity", this.FilterActivity);
                }
                return this._activity;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Opportunity", "CompanyID", "CompanyID", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Opportunity.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Nullable<int>);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Opportunity.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Opportunity-contact-association", "ContactID", "ContactID")]
        public Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityRef<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact.Entity;
            }
            set
            {
                Contact previous = this.Contact;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact", value);
                    this._contact.Entity = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.RaiseDataMemberChanging("ContactID");
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaiseDataMemberChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateCreated' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateCreated
        {
            get
            {
                return this._dateCreated;
            }
            set
            {
                if ((this._dateCreated != value))
                {
                    this.OnDateCreatedChanging(value);
                    this.RaiseDataMemberChanging("DateCreated");
                    this.ValidateProperty("DateCreated", value);
                    this._dateCreated = value;
                    this.RaiseDataMemberChanged("DateCreated");
                    this.OnDateCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DiscountPercent' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> DiscountPercent
        {
            get
            {
                return this._discountPercent;
            }
            set
            {
                if ((this._discountPercent != value))
                {
                    this.OnDiscountPercentChanging(value);
                    this.RaiseDataMemberChanging("DiscountPercent");
                    this.ValidateProperty("DiscountPercent", value);
                    this._discountPercent = value;
                    this.RaiseDataMemberChanged("DiscountPercent");
                    this.OnDiscountPercentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DiscountReason' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DiscountReason
        {
            get
            {
                return this._discountReason;
            }
            set
            {
                if ((this._discountReason != value))
                {
                    this.OnDiscountReasonChanging(value);
                    this.RaiseDataMemberChanging("DiscountReason");
                    this.ValidateProperty("DiscountReason", value);
                    this._discountReason = value;
                    this.RaiseDataMemberChanged("DiscountReason");
                    this.OnDiscountReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EstimationCloseDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EstimationCloseDate
        {
            get
            {
                return this._estimationCloseDate;
            }
            set
            {
                if ((this._estimationCloseDate != value))
                {
                    this.OnEstimationCloseDateChanging(value);
                    this.RaiseDataMemberChanging("EstimationCloseDate");
                    this.ValidateProperty("EstimationCloseDate", value);
                    this._estimationCloseDate = value;
                    this.RaiseDataMemberChanged("EstimationCloseDate");
                    this.OnEstimationCloseDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOverdue' value.
        /// </summary>
        [DataMember()]
        public bool IsOverdue
        {
            get
            {
                return this._isOverdue;
            }
            set
            {
                if ((this._isOverdue != value))
                {
                    this.OnIsOverdueChanging(value);
                    this.RaiseDataMemberChanging("IsOverdue");
                    this.ValidateProperty("IsOverdue", value);
                    this._isOverdue = value;
                    this.RaiseDataMemberChanged("IsOverdue");
                    this.OnIsOverdueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Lead' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Lead
        {
            get
            {
                return this._lead;
            }
            set
            {
                if ((this._lead != value))
                {
                    this.OnLeadChanging(value);
                    this.RaiseDataMemberChanging("Lead");
                    this.ValidateProperty("Lead", value);
                    this._lead = value;
                    this.RaiseDataMemberChanged("Lead");
                    this.OnLeadChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpportunityID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int OpportunityID
        {
            get
            {
                return this._opportunityID;
            }
            set
            {
                if ((this._opportunityID != value))
                {
                    this.OnOpportunityIDChanging(value);
                    this.ValidateProperty("OpportunityID", value);
                    this._opportunityID = value;
                    this.RaisePropertyChanged("OpportunityID");
                    this.OnOpportunityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PriorityType' value.
        /// </summary>
        [DataMember()]
        public PriorityType PriorityType
        {
            get
            {
                return this._priorityType;
            }
            set
            {
                if ((this._priorityType != value))
                {
                    this.OnPriorityTypeChanging(value);
                    this.RaiseDataMemberChanging("PriorityType");
                    this.ValidateProperty("PriorityType", value);
                    this._priorityType = value;
                    this.RaiseDataMemberChanged("PriorityType");
                    this.OnPriorityTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Opportunity-product-association", "ProductID", "ProductID")]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    this._product.Entity = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Stage' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Stage
        {
            get
            {
                return this._stage;
            }
            set
            {
                if ((this._stage != value))
                {
                    this.OnStageChanging(value);
                    this.RaiseDataMemberChanging("Stage");
                    this.ValidateProperty("Stage", value);
                    this._stage = value;
                    this.RaiseDataMemberChanged("Stage");
                    this.OnStageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StageType' value.
        /// </summary>
        [DataMember()]
        public OpportunityStageType StageType
        {
            get
            {
                return this._stageType;
            }
            set
            {
                if ((this._stageType != value))
                {
                    this.OnStageTypeChanging(value);
                    this.RaiseDataMemberChanging("StageType");
                    this.ValidateProperty("StageType", value);
                    this._stageType = value;
                    this.RaiseDataMemberChanged("StageType");
                    this.OnStageTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public OpportunityStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SuccessProbability' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SuccessProbability
        {
            get
            {
                return this._successProbability;
            }
            set
            {
                if ((this._successProbability != value))
                {
                    this.OnSuccessProbabilityChanging(value);
                    this.RaiseDataMemberChanging("SuccessProbability");
                    this.ValidateProperty("SuccessProbability", value);
                    this._successProbability = value;
                    this.RaiseDataMemberChanged("SuccessProbability");
                    this.OnSuccessProbabilityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPrice' value.
        /// </summary>
        [DataMember()]
        public decimal TotalPrice
        {
            get
            {
                return this._totalPrice;
            }
            set
            {
                if ((this._totalPrice != value))
                {
                    this.OnTotalPriceChanging(value);
                    this.RaiseDataMemberChanging("TotalPrice");
                    this.ValidateProperty("TotalPrice", value);
                    this._totalPrice = value;
                    this.RaiseDataMemberChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WonLostReason' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string WonLostReason
        {
            get
            {
                return this._wonLostReason;
            }
            set
            {
                if ((this._wonLostReason != value))
                {
                    this.OnWonLostReasonChanging(value);
                    this.RaiseDataMemberChanging("WonLostReason");
                    this.ValidateProperty("WonLostReason", value);
                    this._wonLostReason = value;
                    this.RaiseDataMemberChanged("WonLostReason");
                    this.OnWonLostReasonChanged();
                }
            }
        }
        
        private bool FilterActivity(Activity entity)
        {
            return (entity.OpportunityID == this.OpportunityID);
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.ContactID == this.ContactID);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._opportunityID;
        }
    }
    
    public enum OpportunityStageType
    {
        
        Cold = 0,
        
        Demo = 1,
        
        PurchaseOrder = 2,
        
        Invoice = 3,
    }
    
    public enum OpportunityStatusType
    {
        
        Open = 0,
        
        OnHold = 1,
        
        ClosedLost = 2,
        
        ClosedWon = 3,
    }
    
    public enum PriorityType
    {
        
        Low = 0,
        
        Medium = 1,
        
        High = 2,
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class Product : Entity
    {
        
        private string _description;
        
        private string _features;
        
        private EntityRef<Image> _image;
        
        private Nullable<int> _imageID;
        
        private string _name;
        
        private EntityCollection<Opportunity> _opportunity;
        
        private int _productID;
        
        private Nullable<int> _productType;
        
        private Nullable<decimal> _unitPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnFeaturesChanging(string value);
        partial void OnFeaturesChanged();
        partial void OnImageIDChanging(Nullable<int> value);
        partial void OnImageIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductTypeChanging(Nullable<int> value);
        partial void OnProductTypeChanged();
        partial void OnUnitPriceChanging(Nullable<decimal> value);
        partial void OnUnitPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Features' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Features
        {
            get
            {
                return this._features;
            }
            set
            {
                if ((this._features != value))
                {
                    this.OnFeaturesChanging(value);
                    this.RaiseDataMemberChanging("Features");
                    this.ValidateProperty("Features", value);
                    this._features = value;
                    this.RaiseDataMemberChanged("Features");
                    this.OnFeaturesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Product-image-association", "ImageID", "ImageID")]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    this._image.Entity = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Opportunity"/> entity instances.
        /// </summary>
        [Association("Product_Opportunity", "ProductID", "ProductID")]
        public EntityCollection<Opportunity> Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityCollection<Opportunity>(this, "Opportunity", this.FilterOpportunity);
                }
                return this._opportunity;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaisePropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductType' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> ProductType
        {
            get
            {
                return this._productType;
            }
            set
            {
                if ((this._productType != value))
                {
                    this.OnProductTypeChanging(value);
                    this.RaiseDataMemberChanging("ProductType");
                    this.ValidateProperty("ProductType", value);
                    this._productType = value;
                    this.RaiseDataMemberChanged("ProductType");
                    this.OnProductTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.ImageID == this.ImageID);
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.ProductID == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productID;
        }
    }
    
    /// <summary>
    /// The 'SalesTrend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM")]
    public sealed partial class SalesTrend : Entity
    {
        
        private Nullable<decimal> _amount;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyID;
        
        private Nullable<DateTime> _date;
        
        private int _salesTrendID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnDateChanging(Nullable<DateTime> value);
        partial void OnDateChanged();
        partial void OnSalesTrendIDChanging(int value);
        partial void OnSalesTrendIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesTrend"/> class.
        /// </summary>
        public SalesTrend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SalesTrend", "CompanyID", "CompanyID", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SalesTrend.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Nullable<int>);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SalesTrend.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesTrendID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SalesTrendID
        {
            get
            {
                return this._salesTrendID;
            }
            set
            {
                if ((this._salesTrendID != value))
                {
                    this.OnSalesTrendIDChanging(value);
                    this.ValidateProperty("SalesTrendID", value);
                    this._salesTrendID = value;
                    this.RaisePropertyChanged("SalesTrendID");
                    this.OnSalesTrendIDChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._salesTrendID;
        }
    }
}
namespace Procbel.Apps.Model.CRM.Dashboard
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'DashboardStats' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.CRM.Dashboard")]
    public sealed partial class DashboardStats : ComplexObject
    {
        
        private int _activitiesCount;
        
        private int _closedLossOpportunitiesPercentage;
        
        private int[] _closedOpportunities;
        
        private int _closedOpportunitiesCount;
        
        private double _closedOpportunitiesPercentage;
        
        private int _closedWinOpportunitiesCount;
        
        private int _closedWinOpportunitiesPercentage;
        
        private int[] _leads;
        
        private double _leadsPercentage;
        
        private int _openOpportunitiesCount;
        
        private int _openTasksCount;
        
        private int _opportunitiesCount;
        
        private decimal _totalOpenOpportunitiesPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActivitiesCountChanging(int value);
        partial void OnActivitiesCountChanged();
        partial void OnClosedLossOpportunitiesPercentageChanging(int value);
        partial void OnClosedLossOpportunitiesPercentageChanged();
        partial void OnClosedOpportunitiesChanging(int[] value);
        partial void OnClosedOpportunitiesChanged();
        partial void OnClosedOpportunitiesCountChanging(int value);
        partial void OnClosedOpportunitiesCountChanged();
        partial void OnClosedOpportunitiesPercentageChanging(double value);
        partial void OnClosedOpportunitiesPercentageChanged();
        partial void OnClosedWinOpportunitiesCountChanging(int value);
        partial void OnClosedWinOpportunitiesCountChanged();
        partial void OnClosedWinOpportunitiesPercentageChanging(int value);
        partial void OnClosedWinOpportunitiesPercentageChanged();
        partial void OnLeadsChanging(int[] value);
        partial void OnLeadsChanged();
        partial void OnLeadsPercentageChanging(double value);
        partial void OnLeadsPercentageChanged();
        partial void OnOpenOpportunitiesCountChanging(int value);
        partial void OnOpenOpportunitiesCountChanged();
        partial void OnOpenTasksCountChanging(int value);
        partial void OnOpenTasksCountChanged();
        partial void OnOpportunitiesCountChanging(int value);
        partial void OnOpportunitiesCountChanged();
        partial void OnTotalOpenOpportunitiesPriceChanging(decimal value);
        partial void OnTotalOpenOpportunitiesPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DashboardStats"/> class.
        /// </summary>
        public DashboardStats()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActivitiesCount' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ActivitiesCount
        {
            get
            {
                return this._activitiesCount;
            }
            set
            {
                if ((this._activitiesCount != value))
                {
                    this.OnActivitiesCountChanging(value);
                    this.ValidateProperty("ActivitiesCount", value);
                    this._activitiesCount = value;
                    this.RaisePropertyChanged("ActivitiesCount");
                    this.OnActivitiesCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClosedLossOpportunitiesPercentage' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ClosedLossOpportunitiesPercentage
        {
            get
            {
                return this._closedLossOpportunitiesPercentage;
            }
            set
            {
                if ((this._closedLossOpportunitiesPercentage != value))
                {
                    this.OnClosedLossOpportunitiesPercentageChanging(value);
                    this.ValidateProperty("ClosedLossOpportunitiesPercentage", value);
                    this._closedLossOpportunitiesPercentage = value;
                    this.RaisePropertyChanged("ClosedLossOpportunitiesPercentage");
                    this.OnClosedLossOpportunitiesPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClosedOpportunities' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int[] ClosedOpportunities
        {
            get
            {
                return this._closedOpportunities;
            }
            set
            {
                if ((this._closedOpportunities != value))
                {
                    this.OnClosedOpportunitiesChanging(value);
                    this.ValidateProperty("ClosedOpportunities", value);
                    this._closedOpportunities = value;
                    this.RaisePropertyChanged("ClosedOpportunities");
                    this.OnClosedOpportunitiesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClosedOpportunitiesCount' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ClosedOpportunitiesCount
        {
            get
            {
                return this._closedOpportunitiesCount;
            }
            set
            {
                if ((this._closedOpportunitiesCount != value))
                {
                    this.OnClosedOpportunitiesCountChanging(value);
                    this.ValidateProperty("ClosedOpportunitiesCount", value);
                    this._closedOpportunitiesCount = value;
                    this.RaisePropertyChanged("ClosedOpportunitiesCount");
                    this.OnClosedOpportunitiesCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClosedOpportunitiesPercentage' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double ClosedOpportunitiesPercentage
        {
            get
            {
                return this._closedOpportunitiesPercentage;
            }
            set
            {
                if ((this._closedOpportunitiesPercentage != value))
                {
                    this.OnClosedOpportunitiesPercentageChanging(value);
                    this.ValidateProperty("ClosedOpportunitiesPercentage", value);
                    this._closedOpportunitiesPercentage = value;
                    this.RaisePropertyChanged("ClosedOpportunitiesPercentage");
                    this.OnClosedOpportunitiesPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClosedWinOpportunitiesCount' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ClosedWinOpportunitiesCount
        {
            get
            {
                return this._closedWinOpportunitiesCount;
            }
            set
            {
                if ((this._closedWinOpportunitiesCount != value))
                {
                    this.OnClosedWinOpportunitiesCountChanging(value);
                    this.ValidateProperty("ClosedWinOpportunitiesCount", value);
                    this._closedWinOpportunitiesCount = value;
                    this.RaisePropertyChanged("ClosedWinOpportunitiesCount");
                    this.OnClosedWinOpportunitiesCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ClosedWinOpportunitiesPercentage' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ClosedWinOpportunitiesPercentage
        {
            get
            {
                return this._closedWinOpportunitiesPercentage;
            }
            set
            {
                if ((this._closedWinOpportunitiesPercentage != value))
                {
                    this.OnClosedWinOpportunitiesPercentageChanging(value);
                    this.ValidateProperty("ClosedWinOpportunitiesPercentage", value);
                    this._closedWinOpportunitiesPercentage = value;
                    this.RaisePropertyChanged("ClosedWinOpportunitiesPercentage");
                    this.OnClosedWinOpportunitiesPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Leads' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int[] Leads
        {
            get
            {
                return this._leads;
            }
            set
            {
                if ((this._leads != value))
                {
                    this.OnLeadsChanging(value);
                    this.ValidateProperty("Leads", value);
                    this._leads = value;
                    this.RaisePropertyChanged("Leads");
                    this.OnLeadsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LeadsPercentage' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public double LeadsPercentage
        {
            get
            {
                return this._leadsPercentage;
            }
            set
            {
                if ((this._leadsPercentage != value))
                {
                    this.OnLeadsPercentageChanging(value);
                    this.ValidateProperty("LeadsPercentage", value);
                    this._leadsPercentage = value;
                    this.RaisePropertyChanged("LeadsPercentage");
                    this.OnLeadsPercentageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenOpportunitiesCount' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int OpenOpportunitiesCount
        {
            get
            {
                return this._openOpportunitiesCount;
            }
            set
            {
                if ((this._openOpportunitiesCount != value))
                {
                    this.OnOpenOpportunitiesCountChanging(value);
                    this.ValidateProperty("OpenOpportunitiesCount", value);
                    this._openOpportunitiesCount = value;
                    this.RaisePropertyChanged("OpenOpportunitiesCount");
                    this.OnOpenOpportunitiesCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpenTasksCount' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int OpenTasksCount
        {
            get
            {
                return this._openTasksCount;
            }
            set
            {
                if ((this._openTasksCount != value))
                {
                    this.OnOpenTasksCountChanging(value);
                    this.ValidateProperty("OpenTasksCount", value);
                    this._openTasksCount = value;
                    this.RaisePropertyChanged("OpenTasksCount");
                    this.OnOpenTasksCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpportunitiesCount' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int OpportunitiesCount
        {
            get
            {
                return this._opportunitiesCount;
            }
            set
            {
                if ((this._opportunitiesCount != value))
                {
                    this.OnOpportunitiesCountChanging(value);
                    this.ValidateProperty("OpportunitiesCount", value);
                    this._opportunitiesCount = value;
                    this.RaisePropertyChanged("OpportunitiesCount");
                    this.OnOpportunitiesCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalOpenOpportunitiesPrice' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public decimal TotalOpenOpportunitiesPrice
        {
            get
            {
                return this._totalOpenOpportunitiesPrice;
            }
            set
            {
                if ((this._totalOpenOpportunitiesPrice != value))
                {
                    this.OnTotalOpenOpportunitiesPriceChanging(value);
                    this.ValidateProperty("TotalOpenOpportunitiesPrice", value);
                    this._totalOpenOpportunitiesPrice = value;
                    this.RaisePropertyChanged("TotalOpenOpportunitiesPrice");
                    this.OnTotalOpenOpportunitiesPriceChanged();
                }
            }
        }
    }
}
namespace Procbel.Apps.Model.Main
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Activity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Activity : Entity
    {
        
        private int _activityID;
        
        private Nullable<DateTime> _dateCreated;
        
        private string _description;
        
        private int _dimDateCreatedId;
        
        private int _dimTimeCreatedId;
        
        private Nullable<DateTime> _dueDate;
        
        private Nullable<int> _employeeId;
        
        private bool _isOverdue;
        
        private string _notes;
        
        private EntityRef<Opportunity> _opportunity;
        
        private Nullable<int> _opportunityID;
        
        private Nullable<int> _priority;
        
        private PriorityType _priorityType;
        
        private Nullable<int> _status;
        
        private ActivityStatusType _statusType;
        
        private Nullable<int> _type;
        
        private ActivityType _typeAsEnum;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActivityIDChanging(int value);
        partial void OnActivityIDChanged();
        partial void OnDateCreatedChanging(Nullable<DateTime> value);
        partial void OnDateCreatedChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDimDateCreatedIdChanging(int value);
        partial void OnDimDateCreatedIdChanged();
        partial void OnDimTimeCreatedIdChanging(int value);
        partial void OnDimTimeCreatedIdChanged();
        partial void OnDueDateChanging(Nullable<DateTime> value);
        partial void OnDueDateChanged();
        partial void OnEmployeeIdChanging(Nullable<int> value);
        partial void OnEmployeeIdChanged();
        partial void OnIsOverdueChanging(bool value);
        partial void OnIsOverdueChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnOpportunityIDChanging(Nullable<int> value);
        partial void OnOpportunityIDChanged();
        partial void OnPriorityChanging(Nullable<int> value);
        partial void OnPriorityChanged();
        partial void OnPriorityTypeChanging(PriorityType value);
        partial void OnPriorityTypeChanged();
        partial void OnStatusChanging(Nullable<int> value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(ActivityStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnTypeChanging(Nullable<int> value);
        partial void OnTypeChanged();
        partial void OnTypeAsEnumChanging(ActivityType value);
        partial void OnTypeAsEnumChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity"/> class.
        /// </summary>
        public Activity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActivityID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ActivityID
        {
            get
            {
                return this._activityID;
            }
            set
            {
                if ((this._activityID != value))
                {
                    this.OnActivityIDChanging(value);
                    this.ValidateProperty("ActivityID", value);
                    this._activityID = value;
                    this.RaisePropertyChanged("ActivityID");
                    this.OnActivityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateCreated' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateCreated
        {
            get
            {
                return this._dateCreated;
            }
            set
            {
                if ((this._dateCreated != value))
                {
                    this.OnDateCreatedChanging(value);
                    this.RaiseDataMemberChanging("DateCreated");
                    this.ValidateProperty("DateCreated", value);
                    this._dateCreated = value;
                    this.RaiseDataMemberChanged("DateCreated");
                    this.OnDateCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimDateCreatedId' value.
        /// </summary>
        [DataMember()]
        public int DimDateCreatedId
        {
            get
            {
                return this._dimDateCreatedId;
            }
            set
            {
                if ((this._dimDateCreatedId != value))
                {
                    this.OnDimDateCreatedIdChanging(value);
                    this.RaiseDataMemberChanging("DimDateCreatedId");
                    this.ValidateProperty("DimDateCreatedId", value);
                    this._dimDateCreatedId = value;
                    this.RaiseDataMemberChanged("DimDateCreatedId");
                    this.OnDimDateCreatedIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimTimeCreatedId' value.
        /// </summary>
        [DataMember()]
        public int DimTimeCreatedId
        {
            get
            {
                return this._dimTimeCreatedId;
            }
            set
            {
                if ((this._dimTimeCreatedId != value))
                {
                    this.OnDimTimeCreatedIdChanging(value);
                    this.RaiseDataMemberChanging("DimTimeCreatedId");
                    this.ValidateProperty("DimTimeCreatedId", value);
                    this._dimTimeCreatedId = value;
                    this.RaiseDataMemberChanged("DimTimeCreatedId");
                    this.OnDimTimeCreatedIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DueDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    this.OnDueDateChanging(value);
                    this.RaiseDataMemberChanging("DueDate");
                    this.ValidateProperty("DueDate", value);
                    this._dueDate = value;
                    this.RaiseDataMemberChanged("DueDate");
                    this.OnDueDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> EmployeeId
        {
            get
            {
                return this._employeeId;
            }
            set
            {
                if ((this._employeeId != value))
                {
                    this.OnEmployeeIdChanging(value);
                    this.RaiseDataMemberChanging("EmployeeId");
                    this.ValidateProperty("EmployeeId", value);
                    this._employeeId = value;
                    this.RaiseDataMemberChanged("EmployeeId");
                    this.OnEmployeeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOverdue' value.
        /// </summary>
        [DataMember()]
        public bool IsOverdue
        {
            get
            {
                return this._isOverdue;
            }
            set
            {
                if ((this._isOverdue != value))
                {
                    this.OnIsOverdueChanging(value);
                    this.RaiseDataMemberChanging("IsOverdue");
                    this.ValidateProperty("IsOverdue", value);
                    this._isOverdue = value;
                    this.RaiseDataMemberChanged("IsOverdue");
                    this.OnIsOverdueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Opportunity"/> entity.
        /// </summary>
        [Association("Activities-opportunity-association", "OpportunityID", "OpportunityID")]
        public Opportunity Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityRef<Opportunity>(this, "Opportunity", this.FilterOpportunity);
                }
                return this._opportunity.Entity;
            }
            set
            {
                Opportunity previous = this.Opportunity;
                if ((previous != value))
                {
                    this.ValidateProperty("Opportunity", value);
                    this._opportunity.Entity = value;
                    this.RaisePropertyChanged("Opportunity");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpportunityID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> OpportunityID
        {
            get
            {
                return this._opportunityID;
            }
            set
            {
                if ((this._opportunityID != value))
                {
                    this.OnOpportunityIDChanging(value);
                    this.RaiseDataMemberChanging("OpportunityID");
                    this.ValidateProperty("OpportunityID", value);
                    this._opportunityID = value;
                    this.RaiseDataMemberChanged("OpportunityID");
                    this.OnOpportunityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PriorityType' value.
        /// </summary>
        [DataMember()]
        public PriorityType PriorityType
        {
            get
            {
                return this._priorityType;
            }
            set
            {
                if ((this._priorityType != value))
                {
                    this.OnPriorityTypeChanging(value);
                    this.RaiseDataMemberChanging("PriorityType");
                    this.ValidateProperty("PriorityType", value);
                    this._priorityType = value;
                    this.RaiseDataMemberChanged("PriorityType");
                    this.OnPriorityTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public ActivityStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeAsEnum' value.
        /// </summary>
        [DataMember()]
        public ActivityType TypeAsEnum
        {
            get
            {
                return this._typeAsEnum;
            }
            set
            {
                if ((this._typeAsEnum != value))
                {
                    this.OnTypeAsEnumChanging(value);
                    this.RaiseDataMemberChanging("TypeAsEnum");
                    this.ValidateProperty("TypeAsEnum", value);
                    this._typeAsEnum = value;
                    this.RaiseDataMemberChanged("TypeAsEnum");
                    this.OnTypeAsEnumChanged();
                }
            }
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.OpportunityID == this.OpportunityID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._activityID;
        }
    }
    
    public enum ActivityStatusType
    {
        
        NotStarted = 0,
        
        InProgress = 1,
        
        Done = 2,
    }
    
    public enum ActivityType
    {
        
        Mail = 0,
        
        Call = 1,
        
        Meet = 2,
    }
    
    /// <summary>
    /// The 'Code' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Code : Entity
    {
        
        private string _assocText;
        
        private Nullable<int> _assocValue;
        
        private Nullable<DateTime> _changeDate;
        
        private EntityCollection<Code> _code1;
        
        private EntityRef<Code> _code2;
        
        private int _codeID;
        
        private string _codeName;
        
        private string _codeType;
        
        private DateTime _createDate;
        
        private string _description;
        
        private Nullable<int> _parentID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAssocTextChanging(string value);
        partial void OnAssocTextChanged();
        partial void OnAssocValueChanging(Nullable<int> value);
        partial void OnAssocValueChanged();
        partial void OnChangeDateChanging(Nullable<DateTime> value);
        partial void OnChangeDateChanged();
        partial void OnCodeIDChanging(int value);
        partial void OnCodeIDChanged();
        partial void OnCodeNameChanging(string value);
        partial void OnCodeNameChanged();
        partial void OnCodeTypeChanging(string value);
        partial void OnCodeTypeChanged();
        partial void OnCreateDateChanging(DateTime value);
        partial void OnCreateDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnParentIDChanging(Nullable<int> value);
        partial void OnParentIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Code"/> class.
        /// </summary>
        public Code()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AssocText' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string AssocText
        {
            get
            {
                return this._assocText;
            }
            set
            {
                if ((this._assocText != value))
                {
                    this.OnAssocTextChanging(value);
                    this.RaiseDataMemberChanging("AssocText");
                    this.ValidateProperty("AssocText", value);
                    this._assocText = value;
                    this.RaiseDataMemberChanged("AssocText");
                    this.OnAssocTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AssocValue' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> AssocValue
        {
            get
            {
                return this._assocValue;
            }
            set
            {
                if ((this._assocValue != value))
                {
                    this.OnAssocValueChanging(value);
                    this.RaiseDataMemberChanging("AssocValue");
                    this.ValidateProperty("AssocValue", value);
                    this._assocValue = value;
                    this.RaiseDataMemberChanged("AssocValue");
                    this.OnAssocValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChangeDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ChangeDate
        {
            get
            {
                return this._changeDate;
            }
            set
            {
                if ((this._changeDate != value))
                {
                    this.OnChangeDateChanging(value);
                    this.RaiseDataMemberChanging("ChangeDate");
                    this.ValidateProperty("ChangeDate", value);
                    this._changeDate = value;
                    this.RaiseDataMemberChanged("ChangeDate");
                    this.OnChangeDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Code"/> entity instances.
        /// </summary>
        [Association("Code_Code", "CodeID", "ParentID")]
        public EntityCollection<Code> Code1
        {
            get
            {
                if ((this._code1 == null))
                {
                    this._code1 = new EntityCollection<Code>(this, "Code1", this.FilterCode1, this.AttachCode1, this.DetachCode1);
                }
                return this._code1;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Code"/> entity.
        /// </summary>
        [Association("Code_Code", "ParentID", "CodeID", IsForeignKey=true)]
        public Code Code2
        {
            get
            {
                if ((this._code2 == null))
                {
                    this._code2 = new EntityRef<Code>(this, "Code2", this.FilterCode2);
                }
                return this._code2.Entity;
            }
            set
            {
                Code previous = this.Code2;
                if ((previous != value))
                {
                    this.ValidateProperty("Code2", value);
                    if ((previous != null))
                    {
                        this._code2.Entity = null;
                        previous.Code1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentID = value.CodeID;
                    }
                    else
                    {
                        this.ParentID = default(Nullable<int>);
                    }
                    this._code2.Entity = value;
                    if ((value != null))
                    {
                        value.Code1.Add(this);
                    }
                    this.RaisePropertyChanged("Code2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CodeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CodeID
        {
            get
            {
                return this._codeID;
            }
            set
            {
                if ((this._codeID != value))
                {
                    this.OnCodeIDChanging(value);
                    this.ValidateProperty("CodeID", value);
                    this._codeID = value;
                    this.RaisePropertyChanged("CodeID");
                    this.OnCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CodeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(150)]
        public string CodeName
        {
            get
            {
                return this._codeName;
            }
            set
            {
                if ((this._codeName != value))
                {
                    this.OnCodeNameChanging(value);
                    this.RaiseDataMemberChanging("CodeName");
                    this.ValidateProperty("CodeName", value);
                    this._codeName = value;
                    this.RaiseDataMemberChanged("CodeName");
                    this.OnCodeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CodeType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string CodeType
        {
            get
            {
                return this._codeType;
            }
            set
            {
                if ((this._codeType != value))
                {
                    this.OnCodeTypeChanging(value);
                    this.RaiseDataMemberChanging("CodeType");
                    this.ValidateProperty("CodeType", value);
                    this._codeType = value;
                    this.RaiseDataMemberChanged("CodeType");
                    this.OnCodeTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreateDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this.ValidateProperty("CreateDate", value);
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ParentID
        {
            get
            {
                return this._parentID;
            }
            set
            {
                if ((this._parentID != value))
                {
                    this.OnParentIDChanging(value);
                    this.RaiseDataMemberChanging("ParentID");
                    this.ValidateProperty("ParentID", value);
                    this._parentID = value;
                    this.RaiseDataMemberChanged("ParentID");
                    this.OnParentIDChanged();
                }
            }
        }
        
        private void AttachCode1(Code entity)
        {
            entity.Code2 = this;
        }
        
        private void DetachCode1(Code entity)
        {
            entity.Code2 = null;
        }
        
        private bool FilterCode1(Code entity)
        {
            return (entity.ParentID == this.CodeID);
        }
        
        private bool FilterCode2(Code entity)
        {
            return (entity.CodeID == this.ParentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._codeID;
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Company : Entity
    {
        
        private string _address;
        
        private string _city;
        
        private int _companyID;
        
        private EntityCollection<Contact> _contact;
        
        private string _country;
        
        private EntityRef<Customer> _customer;
        
        private EntityRef<Image> _image;
        
        private Nullable<int> _imageId;
        
        private string _industry;
        
        private Nullable<bool> _isActive;
        
        private string _name;
        
        private string _nasdaq;
        
        private string _notes;
        
        private EntityCollection<Opportunity> _opportunity;
        
        private string _postcode;
        
        private Nullable<decimal> _revenue;
        
        private EntityCollection<SalesTrend> _salesTrend;
        
        private int _siteId;
        
        private string _state;
        
        private string _website;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(int value);
        partial void OnCompanyIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnImageIdChanging(Nullable<int> value);
        partial void OnImageIdChanged();
        partial void OnIndustryChanging(string value);
        partial void OnIndustryChanged();
        partial void OnIsActiveChanging(Nullable<bool> value);
        partial void OnIsActiveChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNASDAQChanging(string value);
        partial void OnNASDAQChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnRevenueChanging(Nullable<decimal> value);
        partial void OnRevenueChanged();
        partial void OnSiteIdChanging(int value);
        partial void OnSiteIdChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnWebsiteChanging(string value);
        partial void OnWebsiteChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Contact"/> entity instances.
        /// </summary>
        [Association("Company_Contact", "CompanyID", "CompanyID")]
        public EntityCollection<Contact> Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityCollection<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Customer"/> entity.
        /// </summary>
        [Association("Company_Customer", "CompanyID", "Id")]
        public Customer Customer
        {
            get
            {
                if ((this._customer == null))
                {
                    this._customer = new EntityRef<Customer>(this, "Customer", this.FilterCustomer);
                }
                return this._customer.Entity;
            }
            set
            {
                Customer previous = this.Customer;
                if ((previous != value))
                {
                    this.ValidateProperty("Customer", value);
                    if ((previous != null))
                    {
                        this._customer.Entity = null;
                        previous.Company = null;
                    }
                    this._customer.Entity = value;
                    if ((value != null))
                    {
                        value.Company = this;
                    }
                    this.RaisePropertyChanged("Customer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Company-image-association", "ImageId", "Id")]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    this._image.Entity = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ImageId
        {
            get
            {
                return this._imageId;
            }
            set
            {
                if ((this._imageId != value))
                {
                    this.OnImageIdChanging(value);
                    this.RaiseDataMemberChanging("ImageId");
                    this.ValidateProperty("ImageId", value);
                    this._imageId = value;
                    this.RaiseDataMemberChanged("ImageId");
                    this.OnImageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Industry' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Industry
        {
            get
            {
                return this._industry;
            }
            set
            {
                if ((this._industry != value))
                {
                    this.OnIndustryChanging(value);
                    this.RaiseDataMemberChanging("Industry");
                    this.ValidateProperty("Industry", value);
                    this._industry = value;
                    this.RaiseDataMemberChanged("Industry");
                    this.OnIndustryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Name field cannot be empty")]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NASDAQ' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string NASDAQ
        {
            get
            {
                return this._nasdaq;
            }
            set
            {
                if ((this._nasdaq != value))
                {
                    this.OnNASDAQChanging(value);
                    this.RaiseDataMemberChanging("NASDAQ");
                    this.ValidateProperty("NASDAQ", value);
                    this._nasdaq = value;
                    this.RaiseDataMemberChanged("NASDAQ");
                    this.OnNASDAQChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Opportunity"/> entity instances.
        /// </summary>
        [Association("Company_Opportunity", "CompanyID", "CompanyID")]
        public EntityCollection<Opportunity> Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityCollection<Opportunity>(this, "Opportunity", this.FilterOpportunity, this.AttachOpportunity, this.DetachOpportunity);
                }
                return this._opportunity;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Postcode' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Postcode
        {
            get
            {
                return this._postcode;
            }
            set
            {
                if ((this._postcode != value))
                {
                    this.OnPostcodeChanging(value);
                    this.RaiseDataMemberChanging("Postcode");
                    this.ValidateProperty("Postcode", value);
                    this._postcode = value;
                    this.RaiseDataMemberChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Revenue' value.
        /// </summary>
        [DataMember()]
        [Required(ErrorMessage="Revenue field cannot be empty")]
        public Nullable<decimal> Revenue
        {
            get
            {
                return this._revenue;
            }
            set
            {
                if ((this._revenue != value))
                {
                    this.OnRevenueChanging(value);
                    this.RaiseDataMemberChanging("Revenue");
                    this.ValidateProperty("Revenue", value);
                    this._revenue = value;
                    this.RaiseDataMemberChanged("Revenue");
                    this.OnRevenueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SalesTrend"/> entity instances.
        /// </summary>
        [Association("Company_SalesTrend", "CompanyID", "CompanyID")]
        public EntityCollection<SalesTrend> SalesTrend
        {
            get
            {
                if ((this._salesTrend == null))
                {
                    this._salesTrend = new EntityCollection<SalesTrend>(this, "SalesTrend", this.FilterSalesTrend, this.AttachSalesTrend, this.DetachSalesTrend);
                }
                return this._salesTrend;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteId
        {
            get
            {
                return this._siteId;
            }
            set
            {
                if ((this._siteId != value))
                {
                    this.OnSiteIdChanging(value);
                    this.RaiseDataMemberChanging("SiteId");
                    this.ValidateProperty("SiteId", value);
                    this._siteId = value;
                    this.RaiseDataMemberChanged("SiteId");
                    this.OnSiteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Website' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Website
        {
            get
            {
                return this._website;
            }
            set
            {
                if ((this._website != value))
                {
                    this.OnWebsiteChanging(value);
                    this.RaiseDataMemberChanging("Website");
                    this.ValidateProperty("Website", value);
                    this._website = value;
                    this.RaiseDataMemberChanged("Website");
                    this.OnWebsiteChanged();
                }
            }
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterCustomer(Customer entity)
        {
            return (entity.Id == this.CompanyID);
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.Id == this.ImageId);
        }
        
        private void AttachOpportunity(Opportunity entity)
        {
            entity.Company = this;
        }
        
        private void DetachOpportunity(Opportunity entity)
        {
            entity.Company = null;
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSalesTrend(SalesTrend entity)
        {
            entity.Company = this;
        }
        
        private void DetachSalesTrend(SalesTrend entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSalesTrend(SalesTrend entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'Contact' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Contact : Entity
    {
        
        private string _address;
        
        private Nullable<DateTime> _birthday;
        
        private string _blog;
        
        private string _city;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyID;
        
        private int _contactID;
        
        private string _country;
        
        private string _division;
        
        private string _email;
        
        private string _facebook;
        
        private string _googlePlus;
        
        private EntityRef<Image> _image;
        
        private Nullable<int> _imageID;
        
        private Nullable<bool> _isActive;
        
        private Nullable<bool> _isEmployee;
        
        private Nullable<bool> _isImportantPerson;
        
        private Nullable<bool> _isMale;
        
        private string _name;
        
        private string _notes;
        
        private EntityCollection<Opportunity> _opportunity;
        
        private string _phone;
        
        private string _position;
        
        private string _postcode;
        
        private string _state;
        
        private string _twitter;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnBirthdayChanging(Nullable<DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnBlogChanging(string value);
        partial void OnBlogChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnDivisionChanging(string value);
        partial void OnDivisionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFacebookChanging(string value);
        partial void OnFacebookChanged();
        partial void OnGooglePlusChanging(string value);
        partial void OnGooglePlusChanged();
        partial void OnImageIDChanging(Nullable<int> value);
        partial void OnImageIDChanged();
        partial void OnIsActiveChanging(Nullable<bool> value);
        partial void OnIsActiveChanged();
        partial void OnIsEmployeeChanging(Nullable<bool> value);
        partial void OnIsEmployeeChanged();
        partial void OnIsImportantPersonChanging(Nullable<bool> value);
        partial void OnIsImportantPersonChanged();
        partial void OnIsMaleChanging(Nullable<bool> value);
        partial void OnIsMaleChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnPositionChanging(string value);
        partial void OnPositionChanged();
        partial void OnPostcodeChanging(string value);
        partial void OnPostcodeChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnTwitterChanging(string value);
        partial void OnTwitterChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact"/> class.
        /// </summary>
        public Contact()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Birthday' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Birthday
        {
            get
            {
                return this._birthday;
            }
            set
            {
                if ((this._birthday != value))
                {
                    this.OnBirthdayChanging(value);
                    this.RaiseDataMemberChanging("Birthday");
                    this.ValidateProperty("Birthday", value);
                    this._birthday = value;
                    this.RaiseDataMemberChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Blog' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Blog
        {
            get
            {
                return this._blog;
            }
            set
            {
                if ((this._blog != value))
                {
                    this.OnBlogChanging(value);
                    this.RaiseDataMemberChanging("Blog");
                    this.ValidateProperty("Blog", value);
                    this._blog = value;
                    this.RaiseDataMemberChanged("Blog");
                    this.OnBlogChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Contacts-company-association", "CompanyID", "CompanyID")]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    this._company.Entity = value;
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaisePropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Division' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Division
        {
            get
            {
                return this._division;
            }
            set
            {
                if ((this._division != value))
                {
                    this.OnDivisionChanging(value);
                    this.RaiseDataMemberChanging("Division");
                    this.ValidateProperty("Division", value);
                    this._division = value;
                    this.RaiseDataMemberChanged("Division");
                    this.OnDivisionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Facebook' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Facebook
        {
            get
            {
                return this._facebook;
            }
            set
            {
                if ((this._facebook != value))
                {
                    this.OnFacebookChanging(value);
                    this.RaiseDataMemberChanging("Facebook");
                    this.ValidateProperty("Facebook", value);
                    this._facebook = value;
                    this.RaiseDataMemberChanged("Facebook");
                    this.OnFacebookChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GooglePlus' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string GooglePlus
        {
            get
            {
                return this._googlePlus;
            }
            set
            {
                if ((this._googlePlus != value))
                {
                    this.OnGooglePlusChanging(value);
                    this.RaiseDataMemberChanging("GooglePlus");
                    this.ValidateProperty("GooglePlus", value);
                    this._googlePlus = value;
                    this.RaiseDataMemberChanged("GooglePlus");
                    this.OnGooglePlusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Contacts-image-association", "ImageID", "Id")]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    this._image.Entity = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsActive' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this.ValidateProperty("IsActive", value);
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsEmployee' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsEmployee
        {
            get
            {
                return this._isEmployee;
            }
            set
            {
                if ((this._isEmployee != value))
                {
                    this.OnIsEmployeeChanging(value);
                    this.RaiseDataMemberChanging("IsEmployee");
                    this.ValidateProperty("IsEmployee", value);
                    this._isEmployee = value;
                    this.RaiseDataMemberChanged("IsEmployee");
                    this.OnIsEmployeeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsImportantPerson' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsImportantPerson
        {
            get
            {
                return this._isImportantPerson;
            }
            set
            {
                if ((this._isImportantPerson != value))
                {
                    this.OnIsImportantPersonChanging(value);
                    this.RaiseDataMemberChanging("IsImportantPerson");
                    this.ValidateProperty("IsImportantPerson", value);
                    this._isImportantPerson = value;
                    this.RaiseDataMemberChanged("IsImportantPerson");
                    this.OnIsImportantPersonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsMale' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsMale
        {
            get
            {
                return this._isMale;
            }
            set
            {
                if ((this._isMale != value))
                {
                    this.OnIsMaleChanging(value);
                    this.RaiseDataMemberChanging("IsMale");
                    this.ValidateProperty("IsMale", value);
                    this._isMale = value;
                    this.RaiseDataMemberChanged("IsMale");
                    this.OnIsMaleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Opportunity"/> entity instances.
        /// </summary>
        [Association("Contact_Opportunity", "ContactID", "ContactID")]
        public EntityCollection<Opportunity> Opportunity
        {
            get
            {
                if ((this._opportunity == null))
                {
                    this._opportunity = new EntityCollection<Opportunity>(this, "Opportunity", this.FilterOpportunity);
                }
                return this._opportunity;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Phone' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnPhoneChanging(value);
                    this.RaiseDataMemberChanging("Phone");
                    this.ValidateProperty("Phone", value);
                    this._phone = value;
                    this.RaiseDataMemberChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Position' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    this.OnPositionChanging(value);
                    this.RaiseDataMemberChanging("Position");
                    this.ValidateProperty("Position", value);
                    this._position = value;
                    this.RaiseDataMemberChanged("Position");
                    this.OnPositionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Postcode' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Postcode
        {
            get
            {
                return this._postcode;
            }
            set
            {
                if ((this._postcode != value))
                {
                    this.OnPostcodeChanging(value);
                    this.RaiseDataMemberChanging("Postcode");
                    this.ValidateProperty("Postcode", value);
                    this._postcode = value;
                    this.RaiseDataMemberChanged("Postcode");
                    this.OnPostcodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Twitter' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Twitter
        {
            get
            {
                return this._twitter;
            }
            set
            {
                if ((this._twitter != value))
                {
                    this.OnTwitterChanging(value);
                    this.RaiseDataMemberChanging("Twitter");
                    this.ValidateProperty("Twitter", value);
                    this._twitter = value;
                    this.RaiseDataMemberChanged("Twitter");
                    this.OnTwitterChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.Id == this.ImageID);
        }
        
        private bool FilterOpportunity(Opportunity entity)
        {
            return (entity.ContactID == this.ContactID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._contactID;
        }
    }
    
    /// <summary>
    /// The 'ContactsMetadata' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class ContactsMetadata : ComplexObject
    {
        
        private int _activeContacts;
        
        private int _allContacts;
        
        private int _importantContacts;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveContactsChanging(int value);
        partial void OnActiveContactsChanged();
        partial void OnAllContactsChanging(int value);
        partial void OnAllContactsChanged();
        partial void OnImportantContactsChanging(int value);
        partial void OnImportantContactsChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsMetadata"/> class.
        /// </summary>
        public ContactsMetadata()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ActiveContacts' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ActiveContacts
        {
            get
            {
                return this._activeContacts;
            }
            set
            {
                if ((this._activeContacts != value))
                {
                    this.OnActiveContactsChanging(value);
                    this.ValidateProperty("ActiveContacts", value);
                    this._activeContacts = value;
                    this.RaisePropertyChanged("ActiveContacts");
                    this.OnActiveContactsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AllContacts' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int AllContacts
        {
            get
            {
                return this._allContacts;
            }
            set
            {
                if ((this._allContacts != value))
                {
                    this.OnAllContactsChanging(value);
                    this.ValidateProperty("AllContacts", value);
                    this._allContacts = value;
                    this.RaisePropertyChanged("AllContacts");
                    this.OnAllContactsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImportantContacts' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public int ImportantContacts
        {
            get
            {
                return this._importantContacts;
            }
            set
            {
                if ((this._importantContacts != value))
                {
                    this.OnImportantContactsChanging(value);
                    this.ValidateProperty("ImportantContacts", value);
                    this._importantContacts = value;
                    this.RaisePropertyChanged("ImportantContacts");
                    this.OnImportantContactsChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Customer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Customer : Entity
    {
        
        private EntityRef<Company> _company;
        
        private Nullable<decimal> _credito;
        
        private int _id;
        
        private string _propiedad1;
        
        private int _siteId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreditoChanging(Nullable<decimal> value);
        partial void OnCreditoChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnPropiedad1Changing(string value);
        partial void OnPropiedad1Changed();
        partial void OnSiteIdChanging(int value);
        partial void OnSiteIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer"/> class.
        /// </summary>
        public Customer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Customer", "Id", "CompanyID", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Customer = null;
                    }
                    if ((value != null))
                    {
                        this.Id = value.CompanyID;
                    }
                    else
                    {
                        this.Id = default(int);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Customer = this;
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Credito' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Credito
        {
            get
            {
                return this._credito;
            }
            set
            {
                if ((this._credito != value))
                {
                    this.OnCreditoChanging(value);
                    this.RaiseDataMemberChanging("Credito");
                    this.ValidateProperty("Credito", value);
                    this._credito = value;
                    this.RaiseDataMemberChanged("Credito");
                    this.OnCreditoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.RaiseDataMemberChanging("Id");
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaiseDataMemberChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Propiedad1' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Propiedad1
        {
            get
            {
                return this._propiedad1;
            }
            set
            {
                if ((this._propiedad1 != value))
                {
                    this.OnPropiedad1Changing(value);
                    this.RaiseDataMemberChanging("Propiedad1");
                    this.ValidateProperty("Propiedad1", value);
                    this._propiedad1 = value;
                    this.RaiseDataMemberChanged("Propiedad1");
                    this.OnPropiedad1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteId
        {
            get
            {
                return this._siteId;
            }
            set
            {
                if ((this._siteId != value))
                {
                    this.OnSiteIdChanging(value);
                    this.RaiseDataMemberChanging("SiteId");
                    this.ValidateProperty("SiteId", value);
                    this._siteId = value;
                    this.RaiseDataMemberChanged("SiteId");
                    this.OnSiteIdChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Image' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Image : Entity
    {
        
        private EntityCollection<Company> _companies;
        
        private EntityCollection<Contact> _contacts;
        
        private byte[] _content;
        
        private string _extension;
        
        private int _id;
        
        private string _imagePath;
        
        private string _mimeType;
        
        private string _name;
        
        private EntityCollection<Product> _products;
        
        private double _size;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnContentChanging(byte[] value);
        partial void OnContentChanged();
        partial void OnExtensionChanging(string value);
        partial void OnExtensionChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnImagePathChanging(string value);
        partial void OnImagePathChanged();
        partial void OnMimeTypeChanging(string value);
        partial void OnMimeTypeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSizeChanging(double value);
        partial void OnSizeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Image"/> class.
        /// </summary>
        public Image()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Company"/> entity instances.
        /// </summary>
        [Association("Image_Company", "Id", "ImageId")]
        public EntityCollection<Company> Companies
        {
            get
            {
                if ((this._companies == null))
                {
                    this._companies = new EntityCollection<Company>(this, "Companies", this.FilterCompanies);
                }
                return this._companies;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Contact"/> entity instances.
        /// </summary>
        [Association("Image_Contact", "Id", "ImageID")]
        public EntityCollection<Contact> Contacts
        {
            get
            {
                if ((this._contacts == null))
                {
                    this._contacts = new EntityCollection<Contact>(this, "Contacts", this.FilterContacts);
                }
                return this._contacts;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Content' value.
        /// </summary>
        [DataMember()]
        public byte[] Content
        {
            get
            {
                return this._content;
            }
            set
            {
                if ((this._content != value))
                {
                    this.OnContentChanging(value);
                    this.RaiseDataMemberChanging("Content");
                    this.ValidateProperty("Content", value);
                    this._content = value;
                    this.RaiseDataMemberChanged("Content");
                    this.OnContentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Extension' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Extension
        {
            get
            {
                return this._extension;
            }
            set
            {
                if ((this._extension != value))
                {
                    this.OnExtensionChanging(value);
                    this.RaiseDataMemberChanging("Extension");
                    this.ValidateProperty("Extension", value);
                    this._extension = value;
                    this.RaiseDataMemberChanged("Extension");
                    this.OnExtensionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImagePath' value.
        /// </summary>
        [DataMember()]
        public string ImagePath
        {
            get
            {
                return this._imagePath;
            }
            set
            {
                if ((this._imagePath != value))
                {
                    this.OnImagePathChanging(value);
                    this.RaiseDataMemberChanging("ImagePath");
                    this.ValidateProperty("ImagePath", value);
                    this._imagePath = value;
                    this.RaiseDataMemberChanged("ImagePath");
                    this.OnImagePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MimeType' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string MimeType
        {
            get
            {
                return this._mimeType;
            }
            set
            {
                if ((this._mimeType != value))
                {
                    this.OnMimeTypeChanging(value);
                    this.RaiseDataMemberChanging("MimeType");
                    this.ValidateProperty("MimeType", value);
                    this._mimeType = value;
                    this.RaiseDataMemberChanged("MimeType");
                    this.OnMimeTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Product"/> entity instances.
        /// </summary>
        [Association("Image_Product", "Id", "ImageId")]
        public EntityCollection<Product> Products
        {
            get
            {
                if ((this._products == null))
                {
                    this._products = new EntityCollection<Product>(this, "Products", this.FilterProducts, this.AttachProducts, this.DetachProducts);
                }
                return this._products;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Size' value.
        /// </summary>
        [DataMember()]
        public double Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    this.OnSizeChanging(value);
                    this.RaiseDataMemberChanging("Size");
                    this.ValidateProperty("Size", value);
                    this._size = value;
                    this.RaiseDataMemberChanged("Size");
                    this.OnSizeChanged();
                }
            }
        }
        
        private bool FilterCompanies(Company entity)
        {
            return (entity.ImageId == this.Id);
        }
        
        private bool FilterContacts(Contact entity)
        {
            return (entity.ImageID == this.Id);
        }
        
        private void AttachProducts(Product entity)
        {
            entity.Image = this;
        }
        
        private void DetachProducts(Product entity)
        {
            entity.Image = null;
        }
        
        private bool FilterProducts(Product entity)
        {
            return (entity.ImageId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Opportunity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Opportunity : Entity
    {
        
        private EntityCollection<Activity> _activity;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyID;
        
        private EntityRef<Contact> _contact;
        
        private Nullable<int> _contactID;
        
        private Nullable<DateTime> _dateCreated;
        
        private string _description;
        
        private int _dimDateCreatedId;
        
        private int _dimTimeCreatedId;
        
        private Nullable<int> _discountPercent;
        
        private string _discountReason;
        
        private Nullable<DateTime> _estimationCloseDate;
        
        private bool _isOverdue;
        
        private string _lead;
        
        private int _opportunityID;
        
        private Nullable<decimal> _price;
        
        private Nullable<int> _priority;
        
        private PriorityType _priorityType;
        
        private EntityRef<Product> _product;
        
        private Nullable<int> _productID;
        
        private Nullable<int> _quantity;
        
        private int _siteId;
        
        private Nullable<int> _stage;
        
        private OpportunityStageType _stageType;
        
        private Nullable<int> _status;
        
        private OpportunityStatusType _statusType;
        
        private Nullable<int> _successProbability;
        
        private decimal _totalPrice;
        
        private string _wonLostReason;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactIDChanging(Nullable<int> value);
        partial void OnContactIDChanged();
        partial void OnDateCreatedChanging(Nullable<DateTime> value);
        partial void OnDateCreatedChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDimDateCreatedIdChanging(int value);
        partial void OnDimDateCreatedIdChanged();
        partial void OnDimTimeCreatedIdChanging(int value);
        partial void OnDimTimeCreatedIdChanged();
        partial void OnDiscountPercentChanging(Nullable<int> value);
        partial void OnDiscountPercentChanged();
        partial void OnDiscountReasonChanging(string value);
        partial void OnDiscountReasonChanged();
        partial void OnEstimationCloseDateChanging(Nullable<DateTime> value);
        partial void OnEstimationCloseDateChanged();
        partial void OnIsOverdueChanging(bool value);
        partial void OnIsOverdueChanged();
        partial void OnLeadChanging(string value);
        partial void OnLeadChanged();
        partial void OnOpportunityIDChanging(int value);
        partial void OnOpportunityIDChanged();
        partial void OnPriceChanging(Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnPriorityChanging(Nullable<int> value);
        partial void OnPriorityChanged();
        partial void OnPriorityTypeChanging(PriorityType value);
        partial void OnPriorityTypeChanged();
        partial void OnProductIDChanging(Nullable<int> value);
        partial void OnProductIDChanged();
        partial void OnQuantityChanging(Nullable<int> value);
        partial void OnQuantityChanged();
        partial void OnSiteIdChanging(int value);
        partial void OnSiteIdChanged();
        partial void OnStageChanging(Nullable<int> value);
        partial void OnStageChanged();
        partial void OnStageTypeChanging(OpportunityStageType value);
        partial void OnStageTypeChanged();
        partial void OnStatusChanging(Nullable<int> value);
        partial void OnStatusChanged();
        partial void OnStatusTypeChanging(OpportunityStatusType value);
        partial void OnStatusTypeChanged();
        partial void OnSuccessProbabilityChanging(Nullable<int> value);
        partial void OnSuccessProbabilityChanged();
        partial void OnTotalPriceChanging(decimal value);
        partial void OnTotalPriceChanged();
        partial void OnWonLostReasonChanging(string value);
        partial void OnWonLostReasonChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Opportunity"/> class.
        /// </summary>
        public Opportunity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Activity"/> entity instances.
        /// </summary>
        [Association("Opportunity_Activity", "OpportunityID", "OpportunityID")]
        public EntityCollection<Activity> Activity
        {
            get
            {
                if ((this._activity == null))
                {
                    this._activity = new EntityCollection<Activity>(this, "Activity", this.FilterActivity);
                }
                return this._activity;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Opportunity", "CompanyID", "CompanyID", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Opportunity.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Nullable<int>);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Opportunity.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Contact"/> entity.
        /// </summary>
        [Association("Opportunity-contact-association", "ContactID", "ContactID")]
        public Contact Contact
        {
            get
            {
                if ((this._contact == null))
                {
                    this._contact = new EntityRef<Contact>(this, "Contact", this.FilterContact);
                }
                return this._contact.Entity;
            }
            set
            {
                Contact previous = this.Contact;
                if ((previous != value))
                {
                    this.ValidateProperty("Contact", value);
                    this._contact.Entity = value;
                    this.RaisePropertyChanged("Contact");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ContactID
        {
            get
            {
                return this._contactID;
            }
            set
            {
                if ((this._contactID != value))
                {
                    this.OnContactIDChanging(value);
                    this.RaiseDataMemberChanging("ContactID");
                    this.ValidateProperty("ContactID", value);
                    this._contactID = value;
                    this.RaiseDataMemberChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateCreated' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateCreated
        {
            get
            {
                return this._dateCreated;
            }
            set
            {
                if ((this._dateCreated != value))
                {
                    this.OnDateCreatedChanging(value);
                    this.RaiseDataMemberChanging("DateCreated");
                    this.ValidateProperty("DateCreated", value);
                    this._dateCreated = value;
                    this.RaiseDataMemberChanged("DateCreated");
                    this.OnDateCreatedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimDateCreatedId' value.
        /// </summary>
        [DataMember()]
        public int DimDateCreatedId
        {
            get
            {
                return this._dimDateCreatedId;
            }
            set
            {
                if ((this._dimDateCreatedId != value))
                {
                    this.OnDimDateCreatedIdChanging(value);
                    this.RaiseDataMemberChanging("DimDateCreatedId");
                    this.ValidateProperty("DimDateCreatedId", value);
                    this._dimDateCreatedId = value;
                    this.RaiseDataMemberChanged("DimDateCreatedId");
                    this.OnDimDateCreatedIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimTimeCreatedId' value.
        /// </summary>
        [DataMember()]
        public int DimTimeCreatedId
        {
            get
            {
                return this._dimTimeCreatedId;
            }
            set
            {
                if ((this._dimTimeCreatedId != value))
                {
                    this.OnDimTimeCreatedIdChanging(value);
                    this.RaiseDataMemberChanging("DimTimeCreatedId");
                    this.ValidateProperty("DimTimeCreatedId", value);
                    this._dimTimeCreatedId = value;
                    this.RaiseDataMemberChanged("DimTimeCreatedId");
                    this.OnDimTimeCreatedIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DiscountPercent' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> DiscountPercent
        {
            get
            {
                return this._discountPercent;
            }
            set
            {
                if ((this._discountPercent != value))
                {
                    this.OnDiscountPercentChanging(value);
                    this.RaiseDataMemberChanging("DiscountPercent");
                    this.ValidateProperty("DiscountPercent", value);
                    this._discountPercent = value;
                    this.RaiseDataMemberChanged("DiscountPercent");
                    this.OnDiscountPercentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DiscountReason' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DiscountReason
        {
            get
            {
                return this._discountReason;
            }
            set
            {
                if ((this._discountReason != value))
                {
                    this.OnDiscountReasonChanging(value);
                    this.RaiseDataMemberChanging("DiscountReason");
                    this.ValidateProperty("DiscountReason", value);
                    this._discountReason = value;
                    this.RaiseDataMemberChanged("DiscountReason");
                    this.OnDiscountReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EstimationCloseDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> EstimationCloseDate
        {
            get
            {
                return this._estimationCloseDate;
            }
            set
            {
                if ((this._estimationCloseDate != value))
                {
                    this.OnEstimationCloseDateChanging(value);
                    this.RaiseDataMemberChanging("EstimationCloseDate");
                    this.ValidateProperty("EstimationCloseDate", value);
                    this._estimationCloseDate = value;
                    this.RaiseDataMemberChanged("EstimationCloseDate");
                    this.OnEstimationCloseDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsOverdue' value.
        /// </summary>
        [DataMember()]
        public bool IsOverdue
        {
            get
            {
                return this._isOverdue;
            }
            set
            {
                if ((this._isOverdue != value))
                {
                    this.OnIsOverdueChanging(value);
                    this.RaiseDataMemberChanging("IsOverdue");
                    this.ValidateProperty("IsOverdue", value);
                    this._isOverdue = value;
                    this.RaiseDataMemberChanged("IsOverdue");
                    this.OnIsOverdueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Lead' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Lead
        {
            get
            {
                return this._lead;
            }
            set
            {
                if ((this._lead != value))
                {
                    this.OnLeadChanging(value);
                    this.RaiseDataMemberChanging("Lead");
                    this.ValidateProperty("Lead", value);
                    this._lead = value;
                    this.RaiseDataMemberChanged("Lead");
                    this.OnLeadChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OpportunityID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int OpportunityID
        {
            get
            {
                return this._opportunityID;
            }
            set
            {
                if ((this._opportunityID != value))
                {
                    this.OnOpportunityIDChanging(value);
                    this.ValidateProperty("OpportunityID", value);
                    this._opportunityID = value;
                    this.RaisePropertyChanged("OpportunityID");
                    this.OnOpportunityIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PriorityType' value.
        /// </summary>
        [DataMember()]
        public PriorityType PriorityType
        {
            get
            {
                return this._priorityType;
            }
            set
            {
                if ((this._priorityType != value))
                {
                    this.OnPriorityTypeChanging(value);
                    this.RaiseDataMemberChanging("PriorityType");
                    this.ValidateProperty("PriorityType", value);
                    this._priorityType = value;
                    this.RaiseDataMemberChanged("PriorityType");
                    this.OnPriorityTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Product"/> entity.
        /// </summary>
        [Association("Opportunity-product-association", "ProductID", "Id")]
        public Product Product
        {
            get
            {
                if ((this._product == null))
                {
                    this._product = new EntityRef<Product>(this, "Product", this.FilterProduct);
                }
                return this._product.Entity;
            }
            set
            {
                Product previous = this.Product;
                if ((previous != value))
                {
                    this.ValidateProperty("Product", value);
                    this._product.Entity = value;
                    this.RaisePropertyChanged("Product");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        public Nullable<int> ProductID
        {
            get
            {
                return this._productID;
            }
            set
            {
                if ((this._productID != value))
                {
                    this.OnProductIDChanging(value);
                    this.RaiseDataMemberChanging("ProductID");
                    this.ValidateProperty("ProductID", value);
                    this._productID = value;
                    this.RaiseDataMemberChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteId
        {
            get
            {
                return this._siteId;
            }
            set
            {
                if ((this._siteId != value))
                {
                    this.OnSiteIdChanging(value);
                    this.RaiseDataMemberChanging("SiteId");
                    this.ValidateProperty("SiteId", value);
                    this._siteId = value;
                    this.RaiseDataMemberChanged("SiteId");
                    this.OnSiteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Stage' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Stage
        {
            get
            {
                return this._stage;
            }
            set
            {
                if ((this._stage != value))
                {
                    this.OnStageChanging(value);
                    this.RaiseDataMemberChanging("Stage");
                    this.ValidateProperty("Stage", value);
                    this._stage = value;
                    this.RaiseDataMemberChanged("Stage");
                    this.OnStageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StageType' value.
        /// </summary>
        [DataMember()]
        public OpportunityStageType StageType
        {
            get
            {
                return this._stageType;
            }
            set
            {
                if ((this._stageType != value))
                {
                    this.OnStageTypeChanging(value);
                    this.RaiseDataMemberChanging("StageType");
                    this.ValidateProperty("StageType", value);
                    this._stageType = value;
                    this.RaiseDataMemberChanged("StageType");
                    this.OnStageTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusType' value.
        /// </summary>
        [DataMember()]
        public OpportunityStatusType StatusType
        {
            get
            {
                return this._statusType;
            }
            set
            {
                if ((this._statusType != value))
                {
                    this.OnStatusTypeChanging(value);
                    this.RaiseDataMemberChanging("StatusType");
                    this.ValidateProperty("StatusType", value);
                    this._statusType = value;
                    this.RaiseDataMemberChanged("StatusType");
                    this.OnStatusTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SuccessProbability' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> SuccessProbability
        {
            get
            {
                return this._successProbability;
            }
            set
            {
                if ((this._successProbability != value))
                {
                    this.OnSuccessProbabilityChanging(value);
                    this.RaiseDataMemberChanging("SuccessProbability");
                    this.ValidateProperty("SuccessProbability", value);
                    this._successProbability = value;
                    this.RaiseDataMemberChanged("SuccessProbability");
                    this.OnSuccessProbabilityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalPrice' value.
        /// </summary>
        [DataMember()]
        public decimal TotalPrice
        {
            get
            {
                return this._totalPrice;
            }
            set
            {
                if ((this._totalPrice != value))
                {
                    this.OnTotalPriceChanging(value);
                    this.RaiseDataMemberChanging("TotalPrice");
                    this.ValidateProperty("TotalPrice", value);
                    this._totalPrice = value;
                    this.RaiseDataMemberChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WonLostReason' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string WonLostReason
        {
            get
            {
                return this._wonLostReason;
            }
            set
            {
                if ((this._wonLostReason != value))
                {
                    this.OnWonLostReasonChanging(value);
                    this.RaiseDataMemberChanging("WonLostReason");
                    this.ValidateProperty("WonLostReason", value);
                    this._wonLostReason = value;
                    this.RaiseDataMemberChanged("WonLostReason");
                    this.OnWonLostReasonChanged();
                }
            }
        }
        
        private bool FilterActivity(Activity entity)
        {
            return (entity.OpportunityID == this.OpportunityID);
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterContact(Contact entity)
        {
            return (entity.ContactID == this.ContactID);
        }
        
        private bool FilterProduct(Product entity)
        {
            return (entity.Id == this.ProductID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._opportunityID;
        }
    }
    
    public enum OpportunityStageType
    {
        
        Cold = 0,
        
        Demo = 1,
        
        PurchaseOrder = 2,
        
        Invoice = 3,
    }
    
    public enum OpportunityStatusType
    {
        
        Open = 0,
        
        OnHold = 1,
        
        ClosedLost = 2,
        
        ClosedWon = 3,
    }
    
    public enum PriorityType
    {
        
        Low = 0,
        
        Medium = 1,
        
        High = 2,
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Product : Entity
    {
        
        private string _arabicDescription;
        
        private string _chineseDescription;
        
        private string _chineseName;
        
        private string _description;
        
        private string _englishDescription;
        
        private string _englishName;
        
        private string _features;
        
        private string _frenchDescription;
        
        private string _frenchName;
        
        private string _germanDescription;
        
        private string _hebrewDescription;
        
        private int _id;
        
        private EntityRef<Image> _image;
        
        private int _imageId;
        
        private string _japaneseDescription;
        
        private string _name;
        
        private EntityCollection<Opportunity> _opportunities;
        
        private Nullable<int> _productCategoryId;
        
        private string _productNumber;
        
        private ProductType _productType;
        
        private int _siteId;
        
        private string _thaiDescription;
        
        private string _turkishDescription;
        
        private Nullable<decimal> _unitPrice;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnArabicDescriptionChanging(string value);
        partial void OnArabicDescriptionChanged();
        partial void OnChineseDescriptionChanging(string value);
        partial void OnChineseDescriptionChanged();
        partial void OnChineseNameChanging(string value);
        partial void OnChineseNameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEnglishDescriptionChanging(string value);
        partial void OnEnglishDescriptionChanged();
        partial void OnEnglishNameChanging(string value);
        partial void OnEnglishNameChanged();
        partial void OnFeaturesChanging(string value);
        partial void OnFeaturesChanged();
        partial void OnFrenchDescriptionChanging(string value);
        partial void OnFrenchDescriptionChanged();
        partial void OnFrenchNameChanging(string value);
        partial void OnFrenchNameChanged();
        partial void OnGermanDescriptionChanging(string value);
        partial void OnGermanDescriptionChanged();
        partial void OnHebrewDescriptionChanging(string value);
        partial void OnHebrewDescriptionChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnImageIdChanging(int value);
        partial void OnImageIdChanged();
        partial void OnJapaneseDescriptionChanging(string value);
        partial void OnJapaneseDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnProductCategoryIdChanging(Nullable<int> value);
        partial void OnProductCategoryIdChanged();
        partial void OnProductNumberChanging(string value);
        partial void OnProductNumberChanged();
        partial void OnProductTypeChanging(ProductType value);
        partial void OnProductTypeChanged();
        partial void OnSiteIdChanging(int value);
        partial void OnSiteIdChanged();
        partial void OnThaiDescriptionChanging(string value);
        partial void OnThaiDescriptionChanged();
        partial void OnTurkishDescriptionChanging(string value);
        partial void OnTurkishDescriptionChanged();
        partial void OnUnitPriceChanging(Nullable<decimal> value);
        partial void OnUnitPriceChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ArabicDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string ArabicDescription
        {
            get
            {
                return this._arabicDescription;
            }
            set
            {
                if ((this._arabicDescription != value))
                {
                    this.OnArabicDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ArabicDescription");
                    this.ValidateProperty("ArabicDescription", value);
                    this._arabicDescription = value;
                    this.RaiseDataMemberChanged("ArabicDescription");
                    this.OnArabicDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChineseDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string ChineseDescription
        {
            get
            {
                return this._chineseDescription;
            }
            set
            {
                if ((this._chineseDescription != value))
                {
                    this.OnChineseDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ChineseDescription");
                    this.ValidateProperty("ChineseDescription", value);
                    this._chineseDescription = value;
                    this.RaiseDataMemberChanged("ChineseDescription");
                    this.OnChineseDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ChineseName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ChineseName
        {
            get
            {
                return this._chineseName;
            }
            set
            {
                if ((this._chineseName != value))
                {
                    this.OnChineseNameChanging(value);
                    this.RaiseDataMemberChanging("ChineseName");
                    this.ValidateProperty("ChineseName", value);
                    this._chineseName = value;
                    this.RaiseDataMemberChanged("ChineseName");
                    this.OnChineseNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnglishDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string EnglishDescription
        {
            get
            {
                return this._englishDescription;
            }
            set
            {
                if ((this._englishDescription != value))
                {
                    this.OnEnglishDescriptionChanging(value);
                    this.RaiseDataMemberChanging("EnglishDescription");
                    this.ValidateProperty("EnglishDescription", value);
                    this._englishDescription = value;
                    this.RaiseDataMemberChanged("EnglishDescription");
                    this.OnEnglishDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EnglishName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string EnglishName
        {
            get
            {
                return this._englishName;
            }
            set
            {
                if ((this._englishName != value))
                {
                    this.OnEnglishNameChanging(value);
                    this.RaiseDataMemberChanging("EnglishName");
                    this.ValidateProperty("EnglishName", value);
                    this._englishName = value;
                    this.RaiseDataMemberChanged("EnglishName");
                    this.OnEnglishNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Features' value.
        /// </summary>
        [DataMember()]
        [StringLength(600)]
        public string Features
        {
            get
            {
                return this._features;
            }
            set
            {
                if ((this._features != value))
                {
                    this.OnFeaturesChanging(value);
                    this.RaiseDataMemberChanging("Features");
                    this.ValidateProperty("Features", value);
                    this._features = value;
                    this.RaiseDataMemberChanged("Features");
                    this.OnFeaturesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrenchDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string FrenchDescription
        {
            get
            {
                return this._frenchDescription;
            }
            set
            {
                if ((this._frenchDescription != value))
                {
                    this.OnFrenchDescriptionChanging(value);
                    this.RaiseDataMemberChanging("FrenchDescription");
                    this.ValidateProperty("FrenchDescription", value);
                    this._frenchDescription = value;
                    this.RaiseDataMemberChanged("FrenchDescription");
                    this.OnFrenchDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FrenchName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string FrenchName
        {
            get
            {
                return this._frenchName;
            }
            set
            {
                if ((this._frenchName != value))
                {
                    this.OnFrenchNameChanging(value);
                    this.RaiseDataMemberChanging("FrenchName");
                    this.ValidateProperty("FrenchName", value);
                    this._frenchName = value;
                    this.RaiseDataMemberChanged("FrenchName");
                    this.OnFrenchNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GermanDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string GermanDescription
        {
            get
            {
                return this._germanDescription;
            }
            set
            {
                if ((this._germanDescription != value))
                {
                    this.OnGermanDescriptionChanging(value);
                    this.RaiseDataMemberChanging("GermanDescription");
                    this.ValidateProperty("GermanDescription", value);
                    this._germanDescription = value;
                    this.RaiseDataMemberChanged("GermanDescription");
                    this.OnGermanDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HebrewDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string HebrewDescription
        {
            get
            {
                return this._hebrewDescription;
            }
            set
            {
                if ((this._hebrewDescription != value))
                {
                    this.OnHebrewDescriptionChanging(value);
                    this.RaiseDataMemberChanging("HebrewDescription");
                    this.ValidateProperty("HebrewDescription", value);
                    this._hebrewDescription = value;
                    this.RaiseDataMemberChanged("HebrewDescription");
                    this.OnHebrewDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Image"/> entity.
        /// </summary>
        [Association("Image_Product", "ImageId", "Id", IsForeignKey=true)]
        public Image Image
        {
            get
            {
                if ((this._image == null))
                {
                    this._image = new EntityRef<Image>(this, "Image", this.FilterImage);
                }
                return this._image.Entity;
            }
            set
            {
                Image previous = this.Image;
                if ((previous != value))
                {
                    this.ValidateProperty("Image", value);
                    if ((previous != null))
                    {
                        this._image.Entity = null;
                        previous.Products.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ImageId = value.Id;
                    }
                    else
                    {
                        this.ImageId = default(int);
                    }
                    this._image.Entity = value;
                    if ((value != null))
                    {
                        value.Products.Add(this);
                    }
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ImageId
        {
            get
            {
                return this._imageId;
            }
            set
            {
                if ((this._imageId != value))
                {
                    this.OnImageIdChanging(value);
                    this.RaiseDataMemberChanging("ImageId");
                    this.ValidateProperty("ImageId", value);
                    this._imageId = value;
                    this.RaiseDataMemberChanged("ImageId");
                    this.OnImageIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'JapaneseDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string JapaneseDescription
        {
            get
            {
                return this._japaneseDescription;
            }
            set
            {
                if ((this._japaneseDescription != value))
                {
                    this.OnJapaneseDescriptionChanging(value);
                    this.RaiseDataMemberChanging("JapaneseDescription");
                    this.ValidateProperty("JapaneseDescription", value);
                    this._japaneseDescription = value;
                    this.RaiseDataMemberChanged("JapaneseDescription");
                    this.OnJapaneseDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Opportunity"/> entity instances.
        /// </summary>
        [Association("Product_Opportunity", "Id", "ProductID")]
        public EntityCollection<Opportunity> Opportunities
        {
            get
            {
                if ((this._opportunities == null))
                {
                    this._opportunities = new EntityCollection<Opportunity>(this, "Opportunities", this.FilterOpportunities);
                }
                return this._opportunities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductCategoryId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> ProductCategoryId
        {
            get
            {
                return this._productCategoryId;
            }
            set
            {
                if ((this._productCategoryId != value))
                {
                    this.OnProductCategoryIdChanging(value);
                    this.RaiseDataMemberChanging("ProductCategoryId");
                    this.ValidateProperty("ProductCategoryId", value);
                    this._productCategoryId = value;
                    this.RaiseDataMemberChanged("ProductCategoryId");
                    this.OnProductCategoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductNumber' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string ProductNumber
        {
            get
            {
                return this._productNumber;
            }
            set
            {
                if ((this._productNumber != value))
                {
                    this.OnProductNumberChanging(value);
                    this.RaiseDataMemberChanging("ProductNumber");
                    this.ValidateProperty("ProductNumber", value);
                    this._productNumber = value;
                    this.RaiseDataMemberChanged("ProductNumber");
                    this.OnProductNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductType' value.
        /// </summary>
        [DataMember()]
        public ProductType ProductType
        {
            get
            {
                return this._productType;
            }
            set
            {
                if ((this._productType != value))
                {
                    this.OnProductTypeChanging(value);
                    this.RaiseDataMemberChanging("ProductType");
                    this.ValidateProperty("ProductType", value);
                    this._productType = value;
                    this.RaiseDataMemberChanged("ProductType");
                    this.OnProductTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteId
        {
            get
            {
                return this._siteId;
            }
            set
            {
                if ((this._siteId != value))
                {
                    this.OnSiteIdChanging(value);
                    this.RaiseDataMemberChanging("SiteId");
                    this.ValidateProperty("SiteId", value);
                    this._siteId = value;
                    this.RaiseDataMemberChanged("SiteId");
                    this.OnSiteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThaiDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string ThaiDescription
        {
            get
            {
                return this._thaiDescription;
            }
            set
            {
                if ((this._thaiDescription != value))
                {
                    this.OnThaiDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ThaiDescription");
                    this.ValidateProperty("ThaiDescription", value);
                    this._thaiDescription = value;
                    this.RaiseDataMemberChanged("ThaiDescription");
                    this.OnThaiDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TurkishDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(400)]
        public string TurkishDescription
        {
            get
            {
                return this._turkishDescription;
            }
            set
            {
                if ((this._turkishDescription != value))
                {
                    this.OnTurkishDescriptionChanging(value);
                    this.RaiseDataMemberChanging("TurkishDescription");
                    this.ValidateProperty("TurkishDescription", value);
                    this._turkishDescription = value;
                    this.RaiseDataMemberChanged("TurkishDescription");
                    this.OnTurkishDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UnitPrice' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> UnitPrice
        {
            get
            {
                return this._unitPrice;
            }
            set
            {
                if ((this._unitPrice != value))
                {
                    this.OnUnitPriceChanging(value);
                    this.RaiseDataMemberChanging("UnitPrice");
                    this.ValidateProperty("UnitPrice", value);
                    this._unitPrice = value;
                    this.RaiseDataMemberChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }
        
        private bool FilterImage(Image entity)
        {
            return (entity.Id == this.ImageId);
        }
        
        private bool FilterOpportunities(Opportunity entity)
        {
            return (entity.ProductID == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum ProductType
    {
        
        MateriaPrima = 1,
        
        Terminado = 2,
    }
    
    /// <summary>
    /// The 'SalesTrend' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class SalesTrend : Entity
    {
        
        private Nullable<decimal> _amount;
        
        private EntityRef<Company> _company;
        
        private Nullable<int> _companyID;
        
        private Nullable<DateTime> _date;
        
        private int _salesTrendID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAmountChanging(Nullable<decimal> value);
        partial void OnAmountChanged();
        partial void OnCompanyIDChanging(Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnDateChanging(Nullable<DateTime> value);
        partial void OnDateChanged();
        partial void OnSalesTrendIDChanging(int value);
        partial void OnSalesTrendIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesTrend"/> class.
        /// </summary>
        public SalesTrend()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Amount' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    this.OnAmountChanging(value);
                    this.RaiseDataMemberChanging("Amount");
                    this.ValidateProperty("Amount", value);
                    this._amount = value;
                    this.RaiseDataMemberChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SalesTrend", "CompanyID", "CompanyID", IsForeignKey=true)]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SalesTrend.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Nullable<int>);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SalesTrend.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SalesTrendID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SalesTrendID
        {
            get
            {
                return this._salesTrendID;
            }
            set
            {
                if ((this._salesTrendID != value))
                {
                    this.OnSalesTrendIDChanging(value);
                    this.ValidateProperty("SalesTrendID", value);
                    this._salesTrendID = value;
                    this.RaisePropertyChanged("SalesTrendID");
                    this.OnSalesTrendIDChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._salesTrendID;
        }
    }
    
    /// <summary>
    /// The 'Ticket' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class Ticket : Entity
    {
        
        private bool _affectsCustomer;
        
        private string _assignedTo;
        
        private string _createdBy;
        
        private DateTime _createdDate;
        
        private DateTime _currentStatusDate;
        
        private string _currentStatusSetBy;
        
        private string _details;
        
        private int _dimCreatedDateId;
        
        private int _dimCreatedTimeId;
        
        private int _dimCurrentStatusDateId;
        
        private int _dimCurrentStatusTimeId;
        
        private bool _isHtml;
        
        private string _lastUpdateBy;
        
        private DateTime _lastUpdateDate;
        
        private string _owner;
        
        private string _priority;
        
        private bool _publishedToKb;
        
        private int _siteId;
        
        private string _tagList;
        
        private EntityCollection<TicketAttachment> _ticketAttachments;
        
        private EntityRef<TicketCategory> _ticketCategory;
        
        private int _ticketCategoryTicketCategoryId;
        
        private EntityCollection<TicketComment> _ticketComments;
        
        private int _ticketId;
        
        private EntityRef<TicketStatus> _ticketStatus;
        
        private int _ticketStatusTicketStatusId;
        
        private EntityRef<TicketType> _ticketType;
        
        private int _ticketTypeTicketTypeId;
        
        private string _title;
        
        private Guid _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAffectsCustomerChanging(bool value);
        partial void OnAffectsCustomerChanged();
        partial void OnAssignedToChanging(string value);
        partial void OnAssignedToChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnCurrentStatusDateChanging(DateTime value);
        partial void OnCurrentStatusDateChanged();
        partial void OnCurrentStatusSetByChanging(string value);
        partial void OnCurrentStatusSetByChanged();
        partial void OnDetailsChanging(string value);
        partial void OnDetailsChanged();
        partial void OnDimCreatedDateIdChanging(int value);
        partial void OnDimCreatedDateIdChanged();
        partial void OnDimCreatedTimeIdChanging(int value);
        partial void OnDimCreatedTimeIdChanged();
        partial void OnDimCurrentStatusDateIdChanging(int value);
        partial void OnDimCurrentStatusDateIdChanged();
        partial void OnDimCurrentStatusTimeIdChanging(int value);
        partial void OnDimCurrentStatusTimeIdChanged();
        partial void OnIsHtmlChanging(bool value);
        partial void OnIsHtmlChanged();
        partial void OnLastUpdateByChanging(string value);
        partial void OnLastUpdateByChanged();
        partial void OnLastUpdateDateChanging(DateTime value);
        partial void OnLastUpdateDateChanged();
        partial void OnOwnerChanging(string value);
        partial void OnOwnerChanged();
        partial void OnPriorityChanging(string value);
        partial void OnPriorityChanged();
        partial void OnPublishedToKbChanging(bool value);
        partial void OnPublishedToKbChanged();
        partial void OnSiteIdChanging(int value);
        partial void OnSiteIdChanged();
        partial void OnTagListChanging(string value);
        partial void OnTagListChanged();
        partial void OnTicketCategoryTicketCategoryIdChanging(int value);
        partial void OnTicketCategoryTicketCategoryIdChanged();
        partial void OnTicketIdChanging(int value);
        partial void OnTicketIdChanged();
        partial void OnTicketStatusTicketStatusIdChanging(int value);
        partial void OnTicketStatusTicketStatusIdChanged();
        partial void OnTicketTypeTicketTypeIdChanging(int value);
        partial void OnTicketTypeTicketTypeIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnVersionChanging(Guid value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Ticket"/> class.
        /// </summary>
        public Ticket()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AffectsCustomer' value.
        /// </summary>
        [DataMember()]
        public bool AffectsCustomer
        {
            get
            {
                return this._affectsCustomer;
            }
            set
            {
                if ((this._affectsCustomer != value))
                {
                    this.OnAffectsCustomerChanging(value);
                    this.RaiseDataMemberChanging("AffectsCustomer");
                    this.ValidateProperty("AffectsCustomer", value);
                    this._affectsCustomer = value;
                    this.RaiseDataMemberChanged("AffectsCustomer");
                    this.OnAffectsCustomerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AssignedTo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string AssignedTo
        {
            get
            {
                return this._assignedTo;
            }
            set
            {
                if ((this._assignedTo != value))
                {
                    this.OnAssignedToChanging(value);
                    this.RaiseDataMemberChanging("AssignedTo");
                    this.ValidateProperty("AssignedTo", value);
                    this._assignedTo = value;
                    this.RaiseDataMemberChanged("AssignedTo");
                    this.OnAssignedToChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this.ValidateProperty("CreatedBy", value);
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentStatusDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CurrentStatusDate
        {
            get
            {
                return this._currentStatusDate;
            }
            set
            {
                if ((this._currentStatusDate != value))
                {
                    this.OnCurrentStatusDateChanging(value);
                    this.RaiseDataMemberChanging("CurrentStatusDate");
                    this.ValidateProperty("CurrentStatusDate", value);
                    this._currentStatusDate = value;
                    this.RaiseDataMemberChanged("CurrentStatusDate");
                    this.OnCurrentStatusDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentStatusSetBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string CurrentStatusSetBy
        {
            get
            {
                return this._currentStatusSetBy;
            }
            set
            {
                if ((this._currentStatusSetBy != value))
                {
                    this.OnCurrentStatusSetByChanging(value);
                    this.RaiseDataMemberChanging("CurrentStatusSetBy");
                    this.ValidateProperty("CurrentStatusSetBy", value);
                    this._currentStatusSetBy = value;
                    this.RaiseDataMemberChanged("CurrentStatusSetBy");
                    this.OnCurrentStatusSetByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Details' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Details
        {
            get
            {
                return this._details;
            }
            set
            {
                if ((this._details != value))
                {
                    this.OnDetailsChanging(value);
                    this.RaiseDataMemberChanging("Details");
                    this.ValidateProperty("Details", value);
                    this._details = value;
                    this.RaiseDataMemberChanged("Details");
                    this.OnDetailsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimCreatedDateId' value.
        /// </summary>
        [DataMember()]
        public int DimCreatedDateId
        {
            get
            {
                return this._dimCreatedDateId;
            }
            set
            {
                if ((this._dimCreatedDateId != value))
                {
                    this.OnDimCreatedDateIdChanging(value);
                    this.RaiseDataMemberChanging("DimCreatedDateId");
                    this.ValidateProperty("DimCreatedDateId", value);
                    this._dimCreatedDateId = value;
                    this.RaiseDataMemberChanged("DimCreatedDateId");
                    this.OnDimCreatedDateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimCreatedTimeId' value.
        /// </summary>
        [DataMember()]
        public int DimCreatedTimeId
        {
            get
            {
                return this._dimCreatedTimeId;
            }
            set
            {
                if ((this._dimCreatedTimeId != value))
                {
                    this.OnDimCreatedTimeIdChanging(value);
                    this.RaiseDataMemberChanging("DimCreatedTimeId");
                    this.ValidateProperty("DimCreatedTimeId", value);
                    this._dimCreatedTimeId = value;
                    this.RaiseDataMemberChanged("DimCreatedTimeId");
                    this.OnDimCreatedTimeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimCurrentStatusDateId' value.
        /// </summary>
        [DataMember()]
        public int DimCurrentStatusDateId
        {
            get
            {
                return this._dimCurrentStatusDateId;
            }
            set
            {
                if ((this._dimCurrentStatusDateId != value))
                {
                    this.OnDimCurrentStatusDateIdChanging(value);
                    this.RaiseDataMemberChanging("DimCurrentStatusDateId");
                    this.ValidateProperty("DimCurrentStatusDateId", value);
                    this._dimCurrentStatusDateId = value;
                    this.RaiseDataMemberChanged("DimCurrentStatusDateId");
                    this.OnDimCurrentStatusDateIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DimCurrentStatusTimeId' value.
        /// </summary>
        [DataMember()]
        public int DimCurrentStatusTimeId
        {
            get
            {
                return this._dimCurrentStatusTimeId;
            }
            set
            {
                if ((this._dimCurrentStatusTimeId != value))
                {
                    this.OnDimCurrentStatusTimeIdChanging(value);
                    this.RaiseDataMemberChanging("DimCurrentStatusTimeId");
                    this.ValidateProperty("DimCurrentStatusTimeId", value);
                    this._dimCurrentStatusTimeId = value;
                    this.RaiseDataMemberChanged("DimCurrentStatusTimeId");
                    this.OnDimCurrentStatusTimeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsHtml' value.
        /// </summary>
        [DataMember()]
        public bool IsHtml
        {
            get
            {
                return this._isHtml;
            }
            set
            {
                if ((this._isHtml != value))
                {
                    this.OnIsHtmlChanging(value);
                    this.RaiseDataMemberChanging("IsHtml");
                    this.ValidateProperty("IsHtml", value);
                    this._isHtml = value;
                    this.RaiseDataMemberChanged("IsHtml");
                    this.OnIsHtmlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastUpdateBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string LastUpdateBy
        {
            get
            {
                return this._lastUpdateBy;
            }
            set
            {
                if ((this._lastUpdateBy != value))
                {
                    this.OnLastUpdateByChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateBy");
                    this.ValidateProperty("LastUpdateBy", value);
                    this._lastUpdateBy = value;
                    this.RaiseDataMemberChanged("LastUpdateBy");
                    this.OnLastUpdateByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastUpdateDate' value.
        /// </summary>
        [DataMember()]
        public DateTime LastUpdateDate
        {
            get
            {
                return this._lastUpdateDate;
            }
            set
            {
                if ((this._lastUpdateDate != value))
                {
                    this.OnLastUpdateDateChanging(value);
                    this.RaiseDataMemberChanging("LastUpdateDate");
                    this.ValidateProperty("LastUpdateDate", value);
                    this._lastUpdateDate = value;
                    this.RaiseDataMemberChanged("LastUpdateDate");
                    this.OnLastUpdateDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Owner' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                if ((this._owner != value))
                {
                    this.OnOwnerChanging(value);
                    this.RaiseDataMemberChanging("Owner");
                    this.ValidateProperty("Owner", value);
                    this._owner = value;
                    this.RaiseDataMemberChanged("Owner");
                    this.OnOwnerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Priority' value.
        /// </summary>
        [DataMember()]
        [StringLength(25)]
        public string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    this.OnPriorityChanging(value);
                    this.RaiseDataMemberChanging("Priority");
                    this.ValidateProperty("Priority", value);
                    this._priority = value;
                    this.RaiseDataMemberChanged("Priority");
                    this.OnPriorityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PublishedToKb' value.
        /// </summary>
        [DataMember()]
        public bool PublishedToKb
        {
            get
            {
                return this._publishedToKb;
            }
            set
            {
                if ((this._publishedToKb != value))
                {
                    this.OnPublishedToKbChanging(value);
                    this.RaiseDataMemberChanging("PublishedToKb");
                    this.ValidateProperty("PublishedToKb", value);
                    this._publishedToKb = value;
                    this.RaiseDataMemberChanged("PublishedToKb");
                    this.OnPublishedToKbChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteId
        {
            get
            {
                return this._siteId;
            }
            set
            {
                if ((this._siteId != value))
                {
                    this.OnSiteIdChanging(value);
                    this.RaiseDataMemberChanging("SiteId");
                    this.ValidateProperty("SiteId", value);
                    this._siteId = value;
                    this.RaiseDataMemberChanged("SiteId");
                    this.OnSiteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TagList' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string TagList
        {
            get
            {
                return this._tagList;
            }
            set
            {
                if ((this._tagList != value))
                {
                    this.OnTagListChanging(value);
                    this.RaiseDataMemberChanging("TagList");
                    this.ValidateProperty("TagList", value);
                    this._tagList = value;
                    this.RaiseDataMemberChanged("TagList");
                    this.OnTagListChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TicketAttachment"/> entity instances.
        /// </summary>
        [Association("Ticket_TicketAttachment", "TicketId", "TicketId")]
        public EntityCollection<TicketAttachment> TicketAttachments
        {
            get
            {
                if ((this._ticketAttachments == null))
                {
                    this._ticketAttachments = new EntityCollection<TicketAttachment>(this, "TicketAttachments", this.FilterTicketAttachments, this.AttachTicketAttachments, this.DetachTicketAttachments);
                }
                return this._ticketAttachments;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TicketCategory"/> entity.
        /// </summary>
        [Association("TicketCategory_Ticket", "TicketCategoryTicketCategoryId", "TicketCategoryId", IsForeignKey=true)]
        public TicketCategory TicketCategory
        {
            get
            {
                if ((this._ticketCategory == null))
                {
                    this._ticketCategory = new EntityRef<TicketCategory>(this, "TicketCategory", this.FilterTicketCategory);
                }
                return this._ticketCategory.Entity;
            }
            set
            {
                TicketCategory previous = this.TicketCategory;
                if ((previous != value))
                {
                    this.ValidateProperty("TicketCategory", value);
                    if ((previous != null))
                    {
                        this._ticketCategory.Entity = null;
                        previous.Tickets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TicketCategoryTicketCategoryId = value.TicketCategoryId;
                    }
                    else
                    {
                        this.TicketCategoryTicketCategoryId = default(int);
                    }
                    this._ticketCategory.Entity = value;
                    if ((value != null))
                    {
                        value.Tickets.Add(this);
                    }
                    this.RaisePropertyChanged("TicketCategory");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketCategoryTicketCategoryId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TicketCategoryTicketCategoryId
        {
            get
            {
                return this._ticketCategoryTicketCategoryId;
            }
            set
            {
                if ((this._ticketCategoryTicketCategoryId != value))
                {
                    this.OnTicketCategoryTicketCategoryIdChanging(value);
                    this.RaiseDataMemberChanging("TicketCategoryTicketCategoryId");
                    this.ValidateProperty("TicketCategoryTicketCategoryId", value);
                    this._ticketCategoryTicketCategoryId = value;
                    this.RaiseDataMemberChanged("TicketCategoryTicketCategoryId");
                    this.OnTicketCategoryTicketCategoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TicketComment"/> entity instances.
        /// </summary>
        [Association("Ticket_TicketComment", "TicketId", "TicketId")]
        public EntityCollection<TicketComment> TicketComments
        {
            get
            {
                if ((this._ticketComments == null))
                {
                    this._ticketComments = new EntityCollection<TicketComment>(this, "TicketComments", this.FilterTicketComments, this.AttachTicketComments, this.DetachTicketComments);
                }
                return this._ticketComments;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TicketId
        {
            get
            {
                return this._ticketId;
            }
            set
            {
                if ((this._ticketId != value))
                {
                    this.OnTicketIdChanging(value);
                    this.ValidateProperty("TicketId", value);
                    this._ticketId = value;
                    this.RaisePropertyChanged("TicketId");
                    this.OnTicketIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TicketStatus"/> entity.
        /// </summary>
        [Association("TicketStatus_Ticket", "TicketStatusTicketStatusId", "TicketStatusId", IsForeignKey=true)]
        public TicketStatus TicketStatus
        {
            get
            {
                if ((this._ticketStatus == null))
                {
                    this._ticketStatus = new EntityRef<TicketStatus>(this, "TicketStatus", this.FilterTicketStatus);
                }
                return this._ticketStatus.Entity;
            }
            set
            {
                TicketStatus previous = this.TicketStatus;
                if ((previous != value))
                {
                    this.ValidateProperty("TicketStatus", value);
                    if ((previous != null))
                    {
                        this._ticketStatus.Entity = null;
                        previous.Tickets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TicketStatusTicketStatusId = value.TicketStatusId;
                    }
                    else
                    {
                        this.TicketStatusTicketStatusId = default(int);
                    }
                    this._ticketStatus.Entity = value;
                    if ((value != null))
                    {
                        value.Tickets.Add(this);
                    }
                    this.RaisePropertyChanged("TicketStatus");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketStatusTicketStatusId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TicketStatusTicketStatusId
        {
            get
            {
                return this._ticketStatusTicketStatusId;
            }
            set
            {
                if ((this._ticketStatusTicketStatusId != value))
                {
                    this.OnTicketStatusTicketStatusIdChanging(value);
                    this.RaiseDataMemberChanging("TicketStatusTicketStatusId");
                    this.ValidateProperty("TicketStatusTicketStatusId", value);
                    this._ticketStatusTicketStatusId = value;
                    this.RaiseDataMemberChanged("TicketStatusTicketStatusId");
                    this.OnTicketStatusTicketStatusIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TicketType"/> entity.
        /// </summary>
        [Association("TicketType_Ticket", "TicketTypeTicketTypeId", "TicketTypeId", IsForeignKey=true)]
        public TicketType TicketType
        {
            get
            {
                if ((this._ticketType == null))
                {
                    this._ticketType = new EntityRef<TicketType>(this, "TicketType", this.FilterTicketType);
                }
                return this._ticketType.Entity;
            }
            set
            {
                TicketType previous = this.TicketType;
                if ((previous != value))
                {
                    this.ValidateProperty("TicketType", value);
                    if ((previous != null))
                    {
                        this._ticketType.Entity = null;
                        previous.Tickets.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TicketTypeTicketTypeId = value.TicketTypeId;
                    }
                    else
                    {
                        this.TicketTypeTicketTypeId = default(int);
                    }
                    this._ticketType.Entity = value;
                    if ((value != null))
                    {
                        value.Tickets.Add(this);
                    }
                    this.RaisePropertyChanged("TicketType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketTypeTicketTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int TicketTypeTicketTypeId
        {
            get
            {
                return this._ticketTypeTicketTypeId;
            }
            set
            {
                if ((this._ticketTypeTicketTypeId != value))
                {
                    this.OnTicketTypeTicketTypeIdChanging(value);
                    this.RaiseDataMemberChanging("TicketTypeTicketTypeId");
                    this.ValidateProperty("TicketTypeTicketTypeId", value);
                    this._ticketTypeTicketTypeId = value;
                    this.RaiseDataMemberChanged("TicketTypeTicketTypeId");
                    this.OnTicketTypeTicketTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(500)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Guid Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        private void AttachTicketAttachments(TicketAttachment entity)
        {
            entity.Ticket = this;
        }
        
        private void DetachTicketAttachments(TicketAttachment entity)
        {
            entity.Ticket = null;
        }
        
        private bool FilterTicketAttachments(TicketAttachment entity)
        {
            return (entity.TicketId == this.TicketId);
        }
        
        private bool FilterTicketCategory(TicketCategory entity)
        {
            return (entity.TicketCategoryId == this.TicketCategoryTicketCategoryId);
        }
        
        private void AttachTicketComments(TicketComment entity)
        {
            entity.Ticket = this;
        }
        
        private void DetachTicketComments(TicketComment entity)
        {
            entity.Ticket = null;
        }
        
        private bool FilterTicketComments(TicketComment entity)
        {
            return (entity.TicketId == this.TicketId);
        }
        
        private bool FilterTicketStatus(TicketStatus entity)
        {
            return (entity.TicketStatusId == this.TicketStatusTicketStatusId);
        }
        
        private bool FilterTicketType(TicketType entity)
        {
            return (entity.TicketTypeId == this.TicketTypeTicketTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._ticketId;
        }
    }
    
    /// <summary>
    /// The 'TicketAttachment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketAttachment : Entity
    {
        
        private byte[] _fileContents;
        
        private string _fileDescription;
        
        private int _fileId;
        
        private string _fileName;
        
        private int _fileSize;
        
        private string _fileType;
        
        private string _fileUrl;
        
        private bool _isPending;
        
        private EntityRef<Ticket> _ticket;
        
        private Nullable<int> _ticketId;
        
        private string _uploadedBy;
        
        private DateTime _uploadedDate;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFileContentsChanging(byte[] value);
        partial void OnFileContentsChanged();
        partial void OnFileDescriptionChanging(string value);
        partial void OnFileDescriptionChanged();
        partial void OnFileIdChanging(int value);
        partial void OnFileIdChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnFileSizeChanging(int value);
        partial void OnFileSizeChanged();
        partial void OnFileTypeChanging(string value);
        partial void OnFileTypeChanged();
        partial void OnFileUrlChanging(string value);
        partial void OnFileUrlChanged();
        partial void OnIsPendingChanging(bool value);
        partial void OnIsPendingChanged();
        partial void OnTicketIdChanging(Nullable<int> value);
        partial void OnTicketIdChanged();
        partial void OnUploadedByChanging(string value);
        partial void OnUploadedByChanged();
        partial void OnUploadedDateChanging(DateTime value);
        partial void OnUploadedDateChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketAttachment"/> class.
        /// </summary>
        public TicketAttachment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FileContents' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public byte[] FileContents
        {
            get
            {
                return this._fileContents;
            }
            set
            {
                if ((this._fileContents != value))
                {
                    this.OnFileContentsChanging(value);
                    this.RaiseDataMemberChanging("FileContents");
                    this.ValidateProperty("FileContents", value);
                    this._fileContents = value;
                    this.RaiseDataMemberChanged("FileContents");
                    this.OnFileContentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileDescription' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string FileDescription
        {
            get
            {
                return this._fileDescription;
            }
            set
            {
                if ((this._fileDescription != value))
                {
                    this.OnFileDescriptionChanging(value);
                    this.RaiseDataMemberChanging("FileDescription");
                    this.ValidateProperty("FileDescription", value);
                    this._fileDescription = value;
                    this.RaiseDataMemberChanged("FileDescription");
                    this.OnFileDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FileId
        {
            get
            {
                return this._fileId;
            }
            set
            {
                if ((this._fileId != value))
                {
                    this.OnFileIdChanging(value);
                    this.ValidateProperty("FileId", value);
                    this._fileId = value;
                    this.RaisePropertyChanged("FileId");
                    this.OnFileIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileSize' value.
        /// </summary>
        [DataMember()]
        public int FileSize
        {
            get
            {
                return this._fileSize;
            }
            set
            {
                if ((this._fileSize != value))
                {
                    this.OnFileSizeChanging(value);
                    this.RaiseDataMemberChanging("FileSize");
                    this.ValidateProperty("FileSize", value);
                    this._fileSize = value;
                    this.RaiseDataMemberChanged("FileSize");
                    this.OnFileSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileType' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(250)]
        public string FileType
        {
            get
            {
                return this._fileType;
            }
            set
            {
                if ((this._fileType != value))
                {
                    this.OnFileTypeChanging(value);
                    this.RaiseDataMemberChanging("FileType");
                    this.ValidateProperty("FileType", value);
                    this._fileType = value;
                    this.RaiseDataMemberChanged("FileType");
                    this.OnFileTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileUrl' value.
        /// </summary>
        [DataMember()]
        public string FileUrl
        {
            get
            {
                return this._fileUrl;
            }
            set
            {
                if ((this._fileUrl != value))
                {
                    this.OnFileUrlChanging(value);
                    this.RaiseDataMemberChanging("FileUrl");
                    this.ValidateProperty("FileUrl", value);
                    this._fileUrl = value;
                    this.RaiseDataMemberChanged("FileUrl");
                    this.OnFileUrlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsPending' value.
        /// </summary>
        [DataMember()]
        public bool IsPending
        {
            get
            {
                return this._isPending;
            }
            set
            {
                if ((this._isPending != value))
                {
                    this.OnIsPendingChanging(value);
                    this.RaiseDataMemberChanging("IsPending");
                    this.ValidateProperty("IsPending", value);
                    this._isPending = value;
                    this.RaiseDataMemberChanged("IsPending");
                    this.OnIsPendingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Ticket"/> entity.
        /// </summary>
        [Association("Ticket_TicketAttachment", "TicketId", "TicketId", IsForeignKey=true)]
        public Ticket Ticket
        {
            get
            {
                if ((this._ticket == null))
                {
                    this._ticket = new EntityRef<Ticket>(this, "Ticket", this.FilterTicket);
                }
                return this._ticket.Entity;
            }
            set
            {
                Ticket previous = this.Ticket;
                if ((previous != value))
                {
                    this.ValidateProperty("Ticket", value);
                    if ((previous != null))
                    {
                        this._ticket.Entity = null;
                        previous.TicketAttachments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TicketId = value.TicketId;
                    }
                    else
                    {
                        this.TicketId = default(Nullable<int>);
                    }
                    this._ticket.Entity = value;
                    if ((value != null))
                    {
                        value.TicketAttachments.Add(this);
                    }
                    this.RaisePropertyChanged("Ticket");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> TicketId
        {
            get
            {
                return this._ticketId;
            }
            set
            {
                if ((this._ticketId != value))
                {
                    this.OnTicketIdChanging(value);
                    this.RaiseDataMemberChanging("TicketId");
                    this.ValidateProperty("TicketId", value);
                    this._ticketId = value;
                    this.RaiseDataMemberChanged("TicketId");
                    this.OnTicketIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UploadedBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string UploadedBy
        {
            get
            {
                return this._uploadedBy;
            }
            set
            {
                if ((this._uploadedBy != value))
                {
                    this.OnUploadedByChanging(value);
                    this.RaiseDataMemberChanging("UploadedBy");
                    this.ValidateProperty("UploadedBy", value);
                    this._uploadedBy = value;
                    this.RaiseDataMemberChanged("UploadedBy");
                    this.OnUploadedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UploadedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime UploadedDate
        {
            get
            {
                return this._uploadedDate;
            }
            set
            {
                if ((this._uploadedDate != value))
                {
                    this.OnUploadedDateChanging(value);
                    this.RaiseDataMemberChanging("UploadedDate");
                    this.ValidateProperty("UploadedDate", value);
                    this._uploadedDate = value;
                    this.RaiseDataMemberChanged("UploadedDate");
                    this.OnUploadedDateChanged();
                }
            }
        }
        
        private bool FilterTicket(Ticket entity)
        {
            return (entity.TicketId == this.TicketId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._fileId;
        }
    }
    
    /// <summary>
    /// The 'TicketCategory' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketCategory : Entity
    {
        
        private string _categoryName;
        
        private int _ticketCategoryId;
        
        private EntityCollection<Ticket> _tickets;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnTicketCategoryIdChanging(int value);
        partial void OnTicketCategoryIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketCategory"/> class.
        /// </summary>
        public TicketCategory()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketCategoryId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TicketCategoryId
        {
            get
            {
                return this._ticketCategoryId;
            }
            set
            {
                if ((this._ticketCategoryId != value))
                {
                    this.OnTicketCategoryIdChanging(value);
                    this.ValidateProperty("TicketCategoryId", value);
                    this._ticketCategoryId = value;
                    this.RaisePropertyChanged("TicketCategoryId");
                    this.OnTicketCategoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Ticket"/> entity instances.
        /// </summary>
        [Association("TicketCategory_Ticket", "TicketCategoryId", "TicketCategoryTicketCategoryId")]
        public EntityCollection<Ticket> Tickets
        {
            get
            {
                if ((this._tickets == null))
                {
                    this._tickets = new EntityCollection<Ticket>(this, "Tickets", this.FilterTickets, this.AttachTickets, this.DetachTickets);
                }
                return this._tickets;
            }
        }
        
        private void AttachTickets(Ticket entity)
        {
            entity.TicketCategory = this;
        }
        
        private void DetachTickets(Ticket entity)
        {
            entity.TicketCategory = null;
        }
        
        private bool FilterTickets(Ticket entity)
        {
            return (entity.TicketCategoryTicketCategoryId == this.TicketCategoryId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._ticketCategoryId;
        }
    }
    
    /// <summary>
    /// The 'TicketComment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketComment : Entity
    {
        
        private string _comment;
        
        private string _commentedBy;
        
        private DateTime _commentedDate;
        
        private string _commentEvent;
        
        private int _commentId;
        
        private bool _isHtml;
        
        private EntityRef<Ticket> _ticket;
        
        private EntityCollection<TicketEventNotification> _ticketEventNotifications;
        
        private int _ticketId;
        
        private Guid _version;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommentChanging(string value);
        partial void OnCommentChanged();
        partial void OnCommentedByChanging(string value);
        partial void OnCommentedByChanged();
        partial void OnCommentedDateChanging(DateTime value);
        partial void OnCommentedDateChanged();
        partial void OnCommentEventChanging(string value);
        partial void OnCommentEventChanged();
        partial void OnCommentIdChanging(int value);
        partial void OnCommentIdChanged();
        partial void OnIsHtmlChanging(bool value);
        partial void OnIsHtmlChanged();
        partial void OnTicketIdChanging(int value);
        partial void OnTicketIdChanged();
        partial void OnVersionChanging(Guid value);
        partial void OnVersionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketComment"/> class.
        /// </summary>
        public TicketComment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Comment' value.
        /// </summary>
        [DataMember()]
        public string Comment
        {
            get
            {
                return this._comment;
            }
            set
            {
                if ((this._comment != value))
                {
                    this.OnCommentChanging(value);
                    this.RaiseDataMemberChanging("Comment");
                    this.ValidateProperty("Comment", value);
                    this._comment = value;
                    this.RaiseDataMemberChanged("Comment");
                    this.OnCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommentedBy' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string CommentedBy
        {
            get
            {
                return this._commentedBy;
            }
            set
            {
                if ((this._commentedBy != value))
                {
                    this.OnCommentedByChanging(value);
                    this.RaiseDataMemberChanging("CommentedBy");
                    this.ValidateProperty("CommentedBy", value);
                    this._commentedBy = value;
                    this.RaiseDataMemberChanged("CommentedBy");
                    this.OnCommentedByChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommentedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CommentedDate
        {
            get
            {
                return this._commentedDate;
            }
            set
            {
                if ((this._commentedDate != value))
                {
                    this.OnCommentedDateChanging(value);
                    this.RaiseDataMemberChanging("CommentedDate");
                    this.ValidateProperty("CommentedDate", value);
                    this._commentedDate = value;
                    this.RaiseDataMemberChanged("CommentedDate");
                    this.OnCommentedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommentEvent' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string CommentEvent
        {
            get
            {
                return this._commentEvent;
            }
            set
            {
                if ((this._commentEvent != value))
                {
                    this.OnCommentEventChanging(value);
                    this.RaiseDataMemberChanging("CommentEvent");
                    this.ValidateProperty("CommentEvent", value);
                    this._commentEvent = value;
                    this.RaiseDataMemberChanged("CommentEvent");
                    this.OnCommentEventChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CommentId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int CommentId
        {
            get
            {
                return this._commentId;
            }
            set
            {
                if ((this._commentId != value))
                {
                    this.OnCommentIdChanging(value);
                    this.RaiseDataMemberChanging("CommentId");
                    this.ValidateProperty("CommentId", value);
                    this._commentId = value;
                    this.RaiseDataMemberChanged("CommentId");
                    this.OnCommentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsHtml' value.
        /// </summary>
        [DataMember()]
        public bool IsHtml
        {
            get
            {
                return this._isHtml;
            }
            set
            {
                if ((this._isHtml != value))
                {
                    this.OnIsHtmlChanging(value);
                    this.RaiseDataMemberChanging("IsHtml");
                    this.ValidateProperty("IsHtml", value);
                    this._isHtml = value;
                    this.RaiseDataMemberChanged("IsHtml");
                    this.OnIsHtmlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Ticket"/> entity.
        /// </summary>
        [Association("Ticket_TicketComment", "TicketId", "TicketId", IsForeignKey=true)]
        public Ticket Ticket
        {
            get
            {
                if ((this._ticket == null))
                {
                    this._ticket = new EntityRef<Ticket>(this, "Ticket", this.FilterTicket);
                }
                return this._ticket.Entity;
            }
            set
            {
                Ticket previous = this.Ticket;
                if ((previous != value))
                {
                    this.ValidateProperty("Ticket", value);
                    if ((previous != null))
                    {
                        this._ticket.Entity = null;
                        previous.TicketComments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TicketId = value.TicketId;
                    }
                    else
                    {
                        this.TicketId = default(int);
                    }
                    this._ticket.Entity = value;
                    if ((value != null))
                    {
                        value.TicketComments.Add(this);
                    }
                    this.RaisePropertyChanged("Ticket");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="TicketEventNotification"/> entity instances.
        /// </summary>
        [Association("TicketComment_TicketEventNotification", "TicketId,CommentId", "TicketId,CommentId")]
        public EntityCollection<TicketEventNotification> TicketEventNotifications
        {
            get
            {
                if ((this._ticketEventNotifications == null))
                {
                    this._ticketEventNotifications = new EntityCollection<TicketEventNotification>(this, "TicketEventNotifications", this.FilterTicketEventNotifications, this.AttachTicketEventNotifications, this.DetachTicketEventNotifications);
                }
                return this._ticketEventNotifications;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int TicketId
        {
            get
            {
                return this._ticketId;
            }
            set
            {
                if ((this._ticketId != value))
                {
                    this.OnTicketIdChanging(value);
                    this.RaiseDataMemberChanging("TicketId");
                    this.ValidateProperty("TicketId", value);
                    this._ticketId = value;
                    this.RaiseDataMemberChanged("TicketId");
                    this.OnTicketIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Version' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [DataMember()]
        public Guid Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this.OnVersionChanging(value);
                    this.RaiseDataMemberChanging("Version");
                    this.ValidateProperty("Version", value);
                    this._version = value;
                    this.RaiseDataMemberChanged("Version");
                    this.OnVersionChanged();
                }
            }
        }
        
        private bool FilterTicket(Ticket entity)
        {
            return (entity.TicketId == this.TicketId);
        }
        
        private void AttachTicketEventNotifications(TicketEventNotification entity)
        {
            entity.TicketComment = this;
        }
        
        private void DetachTicketEventNotifications(TicketEventNotification entity)
        {
            entity.TicketComment = null;
        }
        
        private bool FilterTicketEventNotifications(TicketEventNotification entity)
        {
            return ((entity.TicketId == this.TicketId) 
                        && (entity.CommentId == this.CommentId));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._commentId, this._ticketId);
        }
    }
    
    /// <summary>
    /// The 'TicketEventNotification' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketEventNotification : Entity
    {
        
        private int _commentId;
        
        private DateTime _createdDate;
        
        private int _deliveryAttempts;
        
        private string _eventGeneratedByUser;
        
        private Nullable<DateTime> _lastDeliveryAttemptDate;
        
        private Nullable<DateTime> _nextDeliveryAttemptDate;
        
        private string _notifyEmail;
        
        private string _notifyUser;
        
        private string _notifyUserDisplayName;
        
        private string _notifyUserReason;
        
        private string _status;
        
        private EntityRef<TicketComment> _ticketComment;
        
        private int _ticketId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCommentIdChanging(int value);
        partial void OnCommentIdChanged();
        partial void OnCreatedDateChanging(DateTime value);
        partial void OnCreatedDateChanged();
        partial void OnDeliveryAttemptsChanging(int value);
        partial void OnDeliveryAttemptsChanged();
        partial void OnEventGeneratedByUserChanging(string value);
        partial void OnEventGeneratedByUserChanged();
        partial void OnLastDeliveryAttemptDateChanging(Nullable<DateTime> value);
        partial void OnLastDeliveryAttemptDateChanged();
        partial void OnNextDeliveryAttemptDateChanging(Nullable<DateTime> value);
        partial void OnNextDeliveryAttemptDateChanged();
        partial void OnNotifyEmailChanging(string value);
        partial void OnNotifyEmailChanged();
        partial void OnNotifyUserChanging(string value);
        partial void OnNotifyUserChanged();
        partial void OnNotifyUserDisplayNameChanging(string value);
        partial void OnNotifyUserDisplayNameChanged();
        partial void OnNotifyUserReasonChanging(string value);
        partial void OnNotifyUserReasonChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnTicketIdChanging(int value);
        partial void OnTicketIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketEventNotification"/> class.
        /// </summary>
        public TicketEventNotification()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CommentId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int CommentId
        {
            get
            {
                return this._commentId;
            }
            set
            {
                if ((this._commentId != value))
                {
                    this.OnCommentIdChanging(value);
                    this.RaiseDataMemberChanging("CommentId");
                    this.ValidateProperty("CommentId", value);
                    this._commentId = value;
                    this.RaiseDataMemberChanged("CommentId");
                    this.OnCommentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CreatedDate' value.
        /// </summary>
        [DataMember()]
        public DateTime CreatedDate
        {
            get
            {
                return this._createdDate;
            }
            set
            {
                if ((this._createdDate != value))
                {
                    this.OnCreatedDateChanging(value);
                    this.RaiseDataMemberChanging("CreatedDate");
                    this.ValidateProperty("CreatedDate", value);
                    this._createdDate = value;
                    this.RaiseDataMemberChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DeliveryAttempts' value.
        /// </summary>
        [DataMember()]
        public int DeliveryAttempts
        {
            get
            {
                return this._deliveryAttempts;
            }
            set
            {
                if ((this._deliveryAttempts != value))
                {
                    this.OnDeliveryAttemptsChanging(value);
                    this.RaiseDataMemberChanging("DeliveryAttempts");
                    this.ValidateProperty("DeliveryAttempts", value);
                    this._deliveryAttempts = value;
                    this.RaiseDataMemberChanged("DeliveryAttempts");
                    this.OnDeliveryAttemptsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EventGeneratedByUser' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string EventGeneratedByUser
        {
            get
            {
                return this._eventGeneratedByUser;
            }
            set
            {
                if ((this._eventGeneratedByUser != value))
                {
                    this.OnEventGeneratedByUserChanging(value);
                    this.RaiseDataMemberChanging("EventGeneratedByUser");
                    this.ValidateProperty("EventGeneratedByUser", value);
                    this._eventGeneratedByUser = value;
                    this.RaiseDataMemberChanged("EventGeneratedByUser");
                    this.OnEventGeneratedByUserChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastDeliveryAttemptDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> LastDeliveryAttemptDate
        {
            get
            {
                return this._lastDeliveryAttemptDate;
            }
            set
            {
                if ((this._lastDeliveryAttemptDate != value))
                {
                    this.OnLastDeliveryAttemptDateChanging(value);
                    this.RaiseDataMemberChanging("LastDeliveryAttemptDate");
                    this.ValidateProperty("LastDeliveryAttemptDate", value);
                    this._lastDeliveryAttemptDate = value;
                    this.RaiseDataMemberChanged("LastDeliveryAttemptDate");
                    this.OnLastDeliveryAttemptDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NextDeliveryAttemptDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> NextDeliveryAttemptDate
        {
            get
            {
                return this._nextDeliveryAttemptDate;
            }
            set
            {
                if ((this._nextDeliveryAttemptDate != value))
                {
                    this.OnNextDeliveryAttemptDateChanging(value);
                    this.RaiseDataMemberChanging("NextDeliveryAttemptDate");
                    this.ValidateProperty("NextDeliveryAttemptDate", value);
                    this._nextDeliveryAttemptDate = value;
                    this.RaiseDataMemberChanged("NextDeliveryAttemptDate");
                    this.OnNextDeliveryAttemptDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NotifyEmail' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string NotifyEmail
        {
            get
            {
                return this._notifyEmail;
            }
            set
            {
                if ((this._notifyEmail != value))
                {
                    this.OnNotifyEmailChanging(value);
                    this.RaiseDataMemberChanging("NotifyEmail");
                    this.ValidateProperty("NotifyEmail", value);
                    this._notifyEmail = value;
                    this.RaiseDataMemberChanged("NotifyEmail");
                    this.OnNotifyEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NotifyUser' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(100)]
        public string NotifyUser
        {
            get
            {
                return this._notifyUser;
            }
            set
            {
                if ((this._notifyUser != value))
                {
                    this.OnNotifyUserChanging(value);
                    this.RaiseDataMemberChanging("NotifyUser");
                    this.ValidateProperty("NotifyUser", value);
                    this._notifyUser = value;
                    this.RaiseDataMemberChanged("NotifyUser");
                    this.OnNotifyUserChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NotifyUserDisplayName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string NotifyUserDisplayName
        {
            get
            {
                return this._notifyUserDisplayName;
            }
            set
            {
                if ((this._notifyUserDisplayName != value))
                {
                    this.OnNotifyUserDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("NotifyUserDisplayName");
                    this.ValidateProperty("NotifyUserDisplayName", value);
                    this._notifyUserDisplayName = value;
                    this.RaiseDataMemberChanged("NotifyUserDisplayName");
                    this.OnNotifyUserDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NotifyUserReason' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string NotifyUserReason
        {
            get
            {
                return this._notifyUserReason;
            }
            set
            {
                if ((this._notifyUserReason != value))
                {
                    this.OnNotifyUserReasonChanging(value);
                    this.RaiseDataMemberChanging("NotifyUserReason");
                    this.ValidateProperty("NotifyUserReason", value);
                    this._notifyUserReason = value;
                    this.RaiseDataMemberChanged("NotifyUserReason");
                    this.OnNotifyUserReasonChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TicketComment"/> entity.
        /// </summary>
        [Association("TicketComment_TicketEventNotification", "TicketId,CommentId", "TicketId,CommentId", IsForeignKey=true)]
        public TicketComment TicketComment
        {
            get
            {
                if ((this._ticketComment == null))
                {
                    this._ticketComment = new EntityRef<TicketComment>(this, "TicketComment", this.FilterTicketComment);
                }
                return this._ticketComment.Entity;
            }
            set
            {
                TicketComment previous = this.TicketComment;
                if ((previous != value))
                {
                    this.ValidateProperty("TicketComment", value);
                    if ((previous != null))
                    {
                        this._ticketComment.Entity = null;
                        previous.TicketEventNotifications.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TicketId = value.TicketId;
                        this.CommentId = value.CommentId;
                    }
                    else
                    {
                        this.TicketId = default(int);
                        this.CommentId = default(int);
                    }
                    this._ticketComment.Entity = value;
                    if ((value != null))
                    {
                        value.TicketEventNotifications.Add(this);
                    }
                    this.RaisePropertyChanged("TicketComment");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int TicketId
        {
            get
            {
                return this._ticketId;
            }
            set
            {
                if ((this._ticketId != value))
                {
                    this.OnTicketIdChanging(value);
                    this.RaiseDataMemberChanging("TicketId");
                    this.ValidateProperty("TicketId", value);
                    this._ticketId = value;
                    this.RaiseDataMemberChanged("TicketId");
                    this.OnTicketIdChanged();
                }
            }
        }
        
        private bool FilterTicketComment(TicketComment entity)
        {
            return ((entity.TicketId == this.TicketId) 
                        && (entity.CommentId == this.CommentId));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._notifyUser == null))
            {
                return null;
            }
            return EntityKey.Create(this._commentId, this._notifyUser, this._ticketId);
        }
    }
    
    /// <summary>
    /// The 'TicketStatus' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketStatus : Entity
    {
        
        private Nullable<bool> _editable;
        
        private Nullable<short> _importanceSize;
        
        private string _statusName;
        
        private EntityCollection<Ticket> _tickets;
        
        private int _ticketStatusId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEditableChanging(Nullable<bool> value);
        partial void OnEditableChanged();
        partial void OnImportanceSizeChanging(Nullable<short> value);
        partial void OnImportanceSizeChanged();
        partial void OnStatusNameChanging(string value);
        partial void OnStatusNameChanged();
        partial void OnTicketStatusIdChanging(int value);
        partial void OnTicketStatusIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketStatus"/> class.
        /// </summary>
        public TicketStatus()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Editable' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Editable
        {
            get
            {
                return this._editable;
            }
            set
            {
                if ((this._editable != value))
                {
                    this.OnEditableChanging(value);
                    this.RaiseDataMemberChanging("Editable");
                    this.ValidateProperty("Editable", value);
                    this._editable = value;
                    this.RaiseDataMemberChanged("Editable");
                    this.OnEditableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImportanceSize' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> ImportanceSize
        {
            get
            {
                return this._importanceSize;
            }
            set
            {
                if ((this._importanceSize != value))
                {
                    this.OnImportanceSizeChanging(value);
                    this.RaiseDataMemberChanging("ImportanceSize");
                    this.ValidateProperty("ImportanceSize", value);
                    this._importanceSize = value;
                    this.RaiseDataMemberChanged("ImportanceSize");
                    this.OnImportanceSizeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StatusName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string StatusName
        {
            get
            {
                return this._statusName;
            }
            set
            {
                if ((this._statusName != value))
                {
                    this.OnStatusNameChanging(value);
                    this.RaiseDataMemberChanging("StatusName");
                    this.ValidateProperty("StatusName", value);
                    this._statusName = value;
                    this.RaiseDataMemberChanged("StatusName");
                    this.OnStatusNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Ticket"/> entity instances.
        /// </summary>
        [Association("TicketStatus_Ticket", "TicketStatusId", "TicketStatusTicketStatusId")]
        public EntityCollection<Ticket> Tickets
        {
            get
            {
                if ((this._tickets == null))
                {
                    this._tickets = new EntityCollection<Ticket>(this, "Tickets", this.FilterTickets, this.AttachTickets, this.DetachTickets);
                }
                return this._tickets;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketStatusId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TicketStatusId
        {
            get
            {
                return this._ticketStatusId;
            }
            set
            {
                if ((this._ticketStatusId != value))
                {
                    this.OnTicketStatusIdChanging(value);
                    this.ValidateProperty("TicketStatusId", value);
                    this._ticketStatusId = value;
                    this.RaisePropertyChanged("TicketStatusId");
                    this.OnTicketStatusIdChanged();
                }
            }
        }
        
        private void AttachTickets(Ticket entity)
        {
            entity.TicketStatus = this;
        }
        
        private void DetachTickets(Ticket entity)
        {
            entity.TicketStatus = null;
        }
        
        private bool FilterTickets(Ticket entity)
        {
            return (entity.TicketStatusTicketStatusId == this.TicketStatusId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._ticketStatusId;
        }
    }
    
    /// <summary>
    /// The 'TicketTag' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketTag : Entity
    {
        
        private string _tagName;
        
        private int _ticketTagId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnTagNameChanging(string value);
        partial void OnTagNameChanged();
        partial void OnTicketTagIdChanging(int value);
        partial void OnTicketTagIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTag"/> class.
        /// </summary>
        public TicketTag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'TagName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string TagName
        {
            get
            {
                return this._tagName;
            }
            set
            {
                if ((this._tagName != value))
                {
                    this.OnTagNameChanging(value);
                    this.RaiseDataMemberChanging("TagName");
                    this.ValidateProperty("TagName", value);
                    this._tagName = value;
                    this.RaiseDataMemberChanged("TagName");
                    this.OnTagNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketTagId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TicketTagId
        {
            get
            {
                return this._ticketTagId;
            }
            set
            {
                if ((this._ticketTagId != value))
                {
                    this.OnTicketTagIdChanging(value);
                    this.ValidateProperty("TicketTagId", value);
                    this._ticketTagId = value;
                    this.RaisePropertyChanged("TicketTagId");
                    this.OnTicketTagIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._ticketTagId;
        }
    }
    
    /// <summary>
    /// The 'TicketType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Model.Main")]
    public sealed partial class TicketType : Entity
    {
        
        private EntityCollection<Ticket> _tickets;
        
        private int _ticketTypeId;
        
        private string _typeName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnTicketTypeIdChanging(int value);
        partial void OnTicketTypeIdChanged();
        partial void OnTypeNameChanging(string value);
        partial void OnTypeNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketType"/> class.
        /// </summary>
        public TicketType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Ticket"/> entity instances.
        /// </summary>
        [Association("TicketType_Ticket", "TicketTypeId", "TicketTypeTicketTypeId")]
        public EntityCollection<Ticket> Tickets
        {
            get
            {
                if ((this._tickets == null))
                {
                    this._tickets = new EntityCollection<Ticket>(this, "Tickets", this.FilterTickets, this.AttachTickets, this.DetachTickets);
                }
                return this._tickets;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TicketTypeId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TicketTypeId
        {
            get
            {
                return this._ticketTypeId;
            }
            set
            {
                if ((this._ticketTypeId != value))
                {
                    this.OnTicketTypeIdChanging(value);
                    this.ValidateProperty("TicketTypeId", value);
                    this._ticketTypeId = value;
                    this.RaisePropertyChanged("TicketTypeId");
                    this.OnTicketTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TypeName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string TypeName
        {
            get
            {
                return this._typeName;
            }
            set
            {
                if ((this._typeName != value))
                {
                    this.OnTypeNameChanging(value);
                    this.RaiseDataMemberChanging("TypeName");
                    this.ValidateProperty("TypeName", value);
                    this._typeName = value;
                    this.RaiseDataMemberChanged("TypeName");
                    this.OnTypeNameChanged();
                }
            }
        }
        
        private void AttachTickets(Ticket entity)
        {
            entity.TicketType = this;
        }
        
        private void DetachTickets(Ticket entity)
        {
            entity.TicketType = null;
        }
        
        private bool FilterTickets(Ticket entity)
        {
            return (entity.TicketTypeTicketTypeId == this.TicketTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._ticketTypeId;
        }
    }
}
namespace Procbel.Apps.Silverlight.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using Procbel.Apps.Model.CRM;
    using Procbel.Apps.Model.CRM.Dashboard;
    using Procbel.Apps.Silverlight.Web.Resources;
    
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'CRMDomainService' DomainService.
    /// </summary>
    public sealed partial class CRMDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CRMDomainContext"/> class.
        /// </summary>
        public CRMDomainContext() : 
                this(new WebDomainClient<ICRMDomainServiceContract>(new Uri("Procbel-Apps-Silverlight-Web-CRMDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CRMDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CRMDomainService service URI.</param>
        public CRMDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ICRMDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CRMDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CRMDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Activity"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Activity> Activities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Activity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Opportunity"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Opportunity> Opportunities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Opportunity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Contact"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Contact> Contacts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Contact>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Image"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Image> Images
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Image>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesTrend"/> entity instances that have been loaded into this <see cref="CRMDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesTrend> SalesTrends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesTrend>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivitiesByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivitiesByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetActivitiesByCompanyIDQuery", parameters);
            return base.CreateQuery<Activity>("GetActivitiesByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivitiesByContactID' query.
        /// </summary>
        /// <param name="contactID">The value for the 'contactID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivitiesByContactIDQuery(int contactID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contactID", contactID);
            this.ValidateMethod("GetActivitiesByContactIDQuery", parameters);
            return base.CreateQuery<Activity>("GetActivitiesByContactID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivitiesByOpportunityID' query.
        /// </summary>
        /// <param name="opportunityID">The value for the 'opportunityID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivitiesByOpportunityIDQuery(int opportunityID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opportunityID", opportunityID);
            this.ValidateMethod("GetActivitiesByOpportunityIDQuery", parameters);
            return base.CreateQuery<Activity>("GetActivitiesByOpportunityID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivity' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivityQuery()
        {
            this.ValidateMethod("GetActivityQuery", null);
            return base.CreateQuery<Activity>("GetActivity", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompany' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompanyQuery()
        {
            this.ValidateMethod("GetCompanyQuery", null);
            return base.CreateQuery<Company>("GetCompany", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetCompanyOverviewActivities' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetCompanyOverviewActivitiesQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetCompanyOverviewActivitiesQuery", parameters);
            return base.CreateQuery<Activity>("GetCompanyOverviewActivities", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetCompanyOverviewOpportunities' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetCompanyOverviewOpportunitiesQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetCompanyOverviewOpportunitiesQuery", parameters);
            return base.CreateQuery<Opportunity>("GetCompanyOverviewOpportunities", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContact' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactQuery()
        {
            this.ValidateMethod("GetContactQuery", null);
            return base.CreateQuery<Contact>("GetContact", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContactsByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetContactsByCompanyIDQuery", parameters);
            return base.CreateQuery<Contact>("GetContactsByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployee' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeeQuery()
        {
            this.ValidateMethod("GetEmployeeQuery", null);
            return base.CreateQuery<Employee>("GetEmployee", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Image"/> entity instances using the 'GetImage' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Image"/> entity instances.</returns>
        public EntityQuery<Image> GetImageQuery()
        {
            this.ValidateMethod("GetImageQuery", null);
            return base.CreateQuery<Image>("GetImage", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetOpportunitiesByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetOpportunitiesByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetOpportunitiesByCompanyIDQuery", parameters);
            return base.CreateQuery<Opportunity>("GetOpportunitiesByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetOpportunitiesByContactID' query.
        /// </summary>
        /// <param name="contactID">The value for the 'contactID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetOpportunitiesByContactIDQuery(int contactID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contactID", contactID);
            this.ValidateMethod("GetOpportunitiesByContactIDQuery", parameters);
            return base.CreateQuery<Opportunity>("GetOpportunitiesByContactID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetOpportunity' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetOpportunityQuery()
        {
            this.ValidateMethod("GetOpportunityQuery", null);
            return base.CreateQuery<Opportunity>("GetOpportunity", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProduct' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductQuery()
        {
            this.ValidateMethod("GetProductQuery", null);
            return base.CreateQuery<Product>("GetProduct", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesTrend"/> entity instances using the 'GetSalesTrend' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesTrend"/> entity instances.</returns>
        public EntityQuery<SalesTrend> GetSalesTrendQuery()
        {
            this.ValidateMethod("GetSalesTrendQuery", null);
            return base.CreateQuery<SalesTrend>("GetSalesTrend", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesTrend"/> entity instances using the 'GetTrendsByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesTrend"/> entity instances.</returns>
        public EntityQuery<SalesTrend> GetTrendsByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetTrendsByCompanyIDQuery", parameters);
            return base.CreateQuery<SalesTrend>("GetTrendsByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetContactsMetadata' method of the DomainService.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ContactsMetadata> GetContactsMetadata(int companyID, Action<InvokeOperation<ContactsMetadata>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetContactsMetadata", parameters);
            return ((InvokeOperation<ContactsMetadata>)(this.InvokeOperation("GetContactsMetadata", typeof(ContactsMetadata), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetContactsMetadata' method of the DomainService.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ContactsMetadata> GetContactsMetadata(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetContactsMetadata", parameters);
            return ((InvokeOperation<ContactsMetadata>)(this.InvokeOperation("GetContactsMetadata", typeof(ContactsMetadata), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetDashboardStats' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DashboardStats> GetDashboardStats(Action<InvokeOperation<DashboardStats>> callback, object userState)
        {
            this.ValidateMethod("GetDashboardStats", null);
            return ((InvokeOperation<DashboardStats>)(this.InvokeOperation("GetDashboardStats", typeof(DashboardStats), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetDashboardStats' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<DashboardStats> GetDashboardStats()
        {
            this.ValidateMethod("GetDashboardStats", null);
            return ((InvokeOperation<DashboardStats>)(this.InvokeOperation("GetDashboardStats", typeof(DashboardStats), null, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CRMDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CRMDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICRMDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivitiesByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetActivitiesByCompanyIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetActivitiesByCompanyID", ReplyAction="http://tempuri.org/CRMDomainService/GetActivitiesByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivitiesByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivitiesByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivitiesByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivitiesByCompanyID' operation.</returns>
            QueryResult<Activity> EndGetActivitiesByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivitiesByContactID' operation.
            /// </summary>
            /// <param name="contactID">The value for the 'contactID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetActivitiesByContactIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetActivitiesByContactID", ReplyAction="http://tempuri.org/CRMDomainService/GetActivitiesByContactIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivitiesByContactID(int contactID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivitiesByContactID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivitiesByContactID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivitiesByContactID' operation.</returns>
            QueryResult<Activity> EndGetActivitiesByContactID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivitiesByOpportunityID' operation.
            /// </summary>
            /// <param name="opportunityID">The value for the 'opportunityID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetActivitiesByOpportunityIDDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetActivitiesByOpportunityID", ReplyAction="http://tempuri.org/CRMDomainService/GetActivitiesByOpportunityIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivitiesByOpportunityID(int opportunityID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivitiesByOpportunityID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivitiesByOpportunityID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivitiesByOpportunityID' operation.</returns>
            QueryResult<Activity> EndGetActivitiesByOpportunityID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivity' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetActivityDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetActivity", ReplyAction="http://tempuri.org/CRMDomainService/GetActivityResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivity(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivity'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivity'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivity' operation.</returns>
            QueryResult<Activity> EndGetActivity(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompany' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetCompanyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetCompany", ReplyAction="http://tempuri.org/CRMDomainService/GetCompanyResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompany(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompany'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompany'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompany' operation.</returns>
            QueryResult<Company> EndGetCompany(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanyOverviewActivities' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetCompanyOverviewActivitiesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetCompanyOverviewActivities", ReplyAction="http://tempuri.org/CRMDomainService/GetCompanyOverviewActivitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanyOverviewActivities(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanyOverviewActivities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanyOverviewActivities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanyOverviewActivities' operation.</returns>
            QueryResult<Activity> EndGetCompanyOverviewActivities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanyOverviewOpportunities' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetCompanyOverviewOpportunitiesDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetCompanyOverviewOpportunities", ReplyAction="http://tempuri.org/CRMDomainService/GetCompanyOverviewOpportunitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanyOverviewOpportunities(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanyOverviewOpportunities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanyOverviewOpportunities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanyOverviewOpportunities' operation.</returns>
            QueryResult<Opportunity> EndGetCompanyOverviewOpportunities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContact' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetContactDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetContact", ReplyAction="http://tempuri.org/CRMDomainService/GetContactResponse")]
            [WebGet()]
            IAsyncResult BeginGetContact(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContact'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContact'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContact' operation.</returns>
            QueryResult<Contact> EndGetContact(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactsByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetContactsByCompanyIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetContactsByCompanyID", ReplyAction="http://tempuri.org/CRMDomainService/GetContactsByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetContactsByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactsByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactsByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContactsByCompanyID' operation.</returns>
            QueryResult<Contact> EndGetContactsByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactsMetadata' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetContactsMetadataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetContactsMetadata", ReplyAction="http://tempuri.org/CRMDomainService/GetContactsMetadataResponse")]
            IAsyncResult BeginGetContactsMetadata(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactsMetadata'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactsMetadata'.</param>
            /// <returns>The 'ContactsMetadata' returned from the 'GetContactsMetadata' operation.</returns>
            ContactsMetadata EndGetContactsMetadata(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDashboardStats' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetDashboardStatsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetDashboardStats", ReplyAction="http://tempuri.org/CRMDomainService/GetDashboardStatsResponse")]
            IAsyncResult BeginGetDashboardStats(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDashboardStats'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDashboardStats'.</param>
            /// <returns>The 'DashboardStats' returned from the 'GetDashboardStats' operation.</returns>
            DashboardStats EndGetDashboardStats(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployee' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetEmployeeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetEmployee", ReplyAction="http://tempuri.org/CRMDomainService/GetEmployeeResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployee(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployee'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployee'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployee' operation.</returns>
            QueryResult<Employee> EndGetEmployee(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetImage' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetImageDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetImage", ReplyAction="http://tempuri.org/CRMDomainService/GetImageResponse")]
            [WebGet()]
            IAsyncResult BeginGetImage(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetImage'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetImage'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetImage' operation.</returns>
            QueryResult<Image> EndGetImage(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpportunitiesByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetOpportunitiesByCompanyIDDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetOpportunitiesByCompanyID", ReplyAction="http://tempuri.org/CRMDomainService/GetOpportunitiesByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpportunitiesByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpportunitiesByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpportunitiesByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpportunitiesByCompanyID' operation.</returns>
            QueryResult<Opportunity> EndGetOpportunitiesByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpportunitiesByContactID' operation.
            /// </summary>
            /// <param name="contactID">The value for the 'contactID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetOpportunitiesByContactIDDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetOpportunitiesByContactID", ReplyAction="http://tempuri.org/CRMDomainService/GetOpportunitiesByContactIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpportunitiesByContactID(int contactID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpportunitiesByContactID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpportunitiesByContactID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpportunitiesByContactID' operation.</returns>
            QueryResult<Opportunity> EndGetOpportunitiesByContactID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpportunity' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetOpportunityDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetOpportunity", ReplyAction="http://tempuri.org/CRMDomainService/GetOpportunityResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpportunity(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpportunity'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpportunity'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpportunity' operation.</returns>
            QueryResult<Opportunity> EndGetOpportunity(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProduct' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetProductDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetProduct", ReplyAction="http://tempuri.org/CRMDomainService/GetProductResponse")]
            [WebGet()]
            IAsyncResult BeginGetProduct(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProduct'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProduct'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProduct' operation.</returns>
            QueryResult<Product> EndGetProduct(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesTrend' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetSalesTrendDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetSalesTrend", ReplyAction="http://tempuri.org/CRMDomainService/GetSalesTrendResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesTrend(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesTrend'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesTrend'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesTrend' operation.</returns>
            QueryResult<SalesTrend> EndGetSalesTrend(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTrendsByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/GetTrendsByCompanyIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/GetTrendsByCompanyID", ReplyAction="http://tempuri.org/CRMDomainService/GetTrendsByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetTrendsByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTrendsByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTrendsByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTrendsByCompanyID' operation.</returns>
            QueryResult<SalesTrend> EndGetTrendsByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CRMDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CRMDomainService/SubmitChanges", ReplyAction="http://tempuri.org/CRMDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CRMDomainContextEntityContainer : EntityContainer
        {
            
            public CRMDomainContextEntityContainer()
            {
                this.CreateEntitySet<Activity>(EntitySetOperations.All);
                this.CreateEntitySet<Company>(EntitySetOperations.All);
                this.CreateEntitySet<Contact>(EntitySetOperations.All);
                this.CreateEntitySet<Employee>(EntitySetOperations.All);
                this.CreateEntitySet<Image>(EntitySetOperations.All);
                this.CreateEntitySet<Opportunity>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<SalesTrend>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Procbel.Apps.Silverlight.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("Procbel-Apps-Silverlight-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
namespace Procbel.Apps.Silverlight.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using Procbel.Apps.Model.Main;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AppsmainDomainService' DomainService.
    /// </summary>
    public sealed partial class AppsmainDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AppsmainDomainContext"/> class.
        /// </summary>
        public AppsmainDomainContext() : 
                this(new WebDomainClient<IAppsmainDomainServiceContract>(new Uri("Procbel-Apps-Silverlight-Web-Services-AppsmainDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AppsmainDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AppsmainDomainService service URI.</param>
        public AppsmainDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IAppsmainDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AppsmainDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AppsmainDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Activity"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Activity> Activities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Activity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Opportunity"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Opportunity> Opportunities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Opportunity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Contact"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Contact> Contacts
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Contact>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Customer"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Customer> Customers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Customer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Image"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Image> Images
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Image>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SalesTrend"/> entity instances that have been loaded into this <see cref="AppsmainDomainContext"/> instance.
        /// </summary>
        public EntitySet<SalesTrend> SalesTrends
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SalesTrend>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivitiesByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivitiesByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetActivitiesByCompanyIDQuery", parameters);
            return base.CreateQuery<Activity>("GetActivitiesByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivitiesByContactID' query.
        /// </summary>
        /// <param name="contactID">The value for the 'contactID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivitiesByContactIDQuery(int contactID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contactID", contactID);
            this.ValidateMethod("GetActivitiesByContactIDQuery", parameters);
            return base.CreateQuery<Activity>("GetActivitiesByContactID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivitiesByOpportunityID' query.
        /// </summary>
        /// <param name="opportunityID">The value for the 'opportunityID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivitiesByOpportunityIDQuery(int opportunityID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("opportunityID", opportunityID);
            this.ValidateMethod("GetActivitiesByOpportunityIDQuery", parameters);
            return base.CreateQuery<Activity>("GetActivitiesByOpportunityID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetActivity' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetActivityQuery()
        {
            this.ValidateMethod("GetActivityQuery", null);
            return base.CreateQuery<Activity>("GetActivity", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompany' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompanyQuery()
        {
            this.ValidateMethod("GetCompanyQuery", null);
            return base.CreateQuery<Company>("GetCompany", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Activity"/> entity instances using the 'GetCompanyOverviewActivities' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Activity"/> entity instances.</returns>
        public EntityQuery<Activity> GetCompanyOverviewActivitiesQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetCompanyOverviewActivitiesQuery", parameters);
            return base.CreateQuery<Activity>("GetCompanyOverviewActivities", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetCompanyOverviewOpportunities' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetCompanyOverviewOpportunitiesQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetCompanyOverviewOpportunitiesQuery", parameters);
            return base.CreateQuery<Opportunity>("GetCompanyOverviewOpportunities", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContact' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactQuery()
        {
            this.ValidateMethod("GetContactQuery", null);
            return base.CreateQuery<Contact>("GetContact", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Contact"/> entity instances using the 'GetContactsByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Contact"/> entity instances.</returns>
        public EntityQuery<Contact> GetContactsByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetContactsByCompanyIDQuery", parameters);
            return base.CreateQuery<Contact>("GetContactsByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Customer"/> entity instances using the 'GetCustomers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Customer"/> entity instances.</returns>
        public EntityQuery<Customer> GetCustomersQuery()
        {
            this.ValidateMethod("GetCustomersQuery", null);
            return base.CreateQuery<Customer>("GetCustomers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Image"/> entity instances using the 'GetImages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Image"/> entity instances.</returns>
        public EntityQuery<Image> GetImagesQuery()
        {
            this.ValidateMethod("GetImagesQuery", null);
            return base.CreateQuery<Image>("GetImages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetOpportunitiesByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetOpportunitiesByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetOpportunitiesByCompanyIDQuery", parameters);
            return base.CreateQuery<Opportunity>("GetOpportunitiesByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetOpportunitiesByContactID' query.
        /// </summary>
        /// <param name="contactID">The value for the 'contactID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetOpportunitiesByContactIDQuery(int contactID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("contactID", contactID);
            this.ValidateMethod("GetOpportunitiesByContactIDQuery", parameters);
            return base.CreateQuery<Opportunity>("GetOpportunitiesByContactID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Opportunity"/> entity instances using the 'GetOpportunity' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Opportunity"/> entity instances.</returns>
        public EntityQuery<Opportunity> GetOpportunityQuery()
        {
            this.ValidateMethod("GetOpportunityQuery", null);
            return base.CreateQuery<Opportunity>("GetOpportunity", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProduct' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductQuery()
        {
            this.ValidateMethod("GetProductQuery", null);
            return base.CreateQuery<Product>("GetProduct", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesTrend"/> entity instances using the 'GetSalesTrend' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesTrend"/> entity instances.</returns>
        public EntityQuery<SalesTrend> GetSalesTrendQuery()
        {
            this.ValidateMethod("GetSalesTrendQuery", null);
            return base.CreateQuery<SalesTrend>("GetSalesTrend", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SalesTrend"/> entity instances using the 'GetTrendsByCompanyID' query.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SalesTrend"/> entity instances.</returns>
        public EntityQuery<SalesTrend> GetTrendsByCompanyIDQuery(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetTrendsByCompanyIDQuery", parameters);
            return base.CreateQuery<SalesTrend>("GetTrendsByCompanyID", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetContactsMetadata' method of the DomainService.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ContactsMetadata> GetContactsMetadata(int companyID, Action<InvokeOperation<ContactsMetadata>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetContactsMetadata", parameters);
            return ((InvokeOperation<ContactsMetadata>)(this.InvokeOperation("GetContactsMetadata", typeof(ContactsMetadata), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetContactsMetadata' method of the DomainService.
        /// </summary>
        /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<ContactsMetadata> GetContactsMetadata(int companyID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("companyID", companyID);
            this.ValidateMethod("GetContactsMetadata", parameters);
            return ((InvokeOperation<ContactsMetadata>)(this.InvokeOperation("GetContactsMetadata", typeof(ContactsMetadata), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AppsmainDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AppsmainDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAppsmainDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivitiesByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetActivitiesByCompanyIDDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetActivitiesByCompanyID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetActivitiesByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivitiesByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivitiesByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivitiesByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivitiesByCompanyID' operation.</returns>
            QueryResult<Activity> EndGetActivitiesByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivitiesByContactID' operation.
            /// </summary>
            /// <param name="contactID">The value for the 'contactID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetActivitiesByContactIDDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetActivitiesByContactID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetActivitiesByContactIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivitiesByContactID(int contactID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivitiesByContactID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivitiesByContactID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivitiesByContactID' operation.</returns>
            QueryResult<Activity> EndGetActivitiesByContactID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivitiesByOpportunityID' operation.
            /// </summary>
            /// <param name="opportunityID">The value for the 'opportunityID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetActivitiesByOpportunityIDDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetActivitiesByOpportunityID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetActivitiesByOpportunityIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivitiesByOpportunityID(int opportunityID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivitiesByOpportunityID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivitiesByOpportunityID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivitiesByOpportunityID' operation.</returns>
            QueryResult<Activity> EndGetActivitiesByOpportunityID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetActivity' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetActivityDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetActivity", ReplyAction="http://tempuri.org/AppsmainDomainService/GetActivityResponse")]
            [WebGet()]
            IAsyncResult BeginGetActivity(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetActivity'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetActivity'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetActivity' operation.</returns>
            QueryResult<Activity> EndGetActivity(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompany' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetCompanyDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetCompany", ReplyAction="http://tempuri.org/AppsmainDomainService/GetCompanyResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompany(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompany'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompany'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompany' operation.</returns>
            QueryResult<Company> EndGetCompany(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanyOverviewActivities' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetCompanyOverviewActivitiesDomainServic" +
                "eFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetCompanyOverviewActivities", ReplyAction="http://tempuri.org/AppsmainDomainService/GetCompanyOverviewActivitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanyOverviewActivities(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanyOverviewActivities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanyOverviewActivities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanyOverviewActivities' operation.</returns>
            QueryResult<Activity> EndGetCompanyOverviewActivities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanyOverviewOpportunities' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetCompanyOverviewOpportunitiesDomainSer" +
                "viceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetCompanyOverviewOpportunities", ReplyAction="http://tempuri.org/AppsmainDomainService/GetCompanyOverviewOpportunitiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanyOverviewOpportunities(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanyOverviewOpportunities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanyOverviewOpportunities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanyOverviewOpportunities' operation.</returns>
            QueryResult<Opportunity> EndGetCompanyOverviewOpportunities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContact' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetContactDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetContact", ReplyAction="http://tempuri.org/AppsmainDomainService/GetContactResponse")]
            [WebGet()]
            IAsyncResult BeginGetContact(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContact'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContact'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContact' operation.</returns>
            QueryResult<Contact> EndGetContact(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactsByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetContactsByCompanyIDDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetContactsByCompanyID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetContactsByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetContactsByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactsByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactsByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetContactsByCompanyID' operation.</returns>
            QueryResult<Contact> EndGetContactsByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetContactsMetadata' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetContactsMetadataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetContactsMetadata", ReplyAction="http://tempuri.org/AppsmainDomainService/GetContactsMetadataResponse")]
            IAsyncResult BeginGetContactsMetadata(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetContactsMetadata'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetContactsMetadata'.</param>
            /// <returns>The 'ContactsMetadata' returned from the 'GetContactsMetadata' operation.</returns>
            ContactsMetadata EndGetContactsMetadata(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetCustomersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetCustomers", ReplyAction="http://tempuri.org/AppsmainDomainService/GetCustomersResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomers' operation.</returns>
            QueryResult<Customer> EndGetCustomers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetImages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetImagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetImages", ReplyAction="http://tempuri.org/AppsmainDomainService/GetImagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetImages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetImages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetImages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetImages' operation.</returns>
            QueryResult<Image> EndGetImages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpportunitiesByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetOpportunitiesByCompanyIDDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetOpportunitiesByCompanyID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetOpportunitiesByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpportunitiesByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpportunitiesByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpportunitiesByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpportunitiesByCompanyID' operation.</returns>
            QueryResult<Opportunity> EndGetOpportunitiesByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpportunitiesByContactID' operation.
            /// </summary>
            /// <param name="contactID">The value for the 'contactID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetOpportunitiesByContactIDDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetOpportunitiesByContactID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetOpportunitiesByContactIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpportunitiesByContactID(int contactID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpportunitiesByContactID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpportunitiesByContactID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpportunitiesByContactID' operation.</returns>
            QueryResult<Opportunity> EndGetOpportunitiesByContactID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOpportunity' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetOpportunityDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetOpportunity", ReplyAction="http://tempuri.org/AppsmainDomainService/GetOpportunityResponse")]
            [WebGet()]
            IAsyncResult BeginGetOpportunity(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOpportunity'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOpportunity'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOpportunity' operation.</returns>
            QueryResult<Opportunity> EndGetOpportunity(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProduct' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetProductDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetProduct", ReplyAction="http://tempuri.org/AppsmainDomainService/GetProductResponse")]
            [WebGet()]
            IAsyncResult BeginGetProduct(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProduct'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProduct'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProduct' operation.</returns>
            QueryResult<Product> EndGetProduct(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSalesTrend' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetSalesTrendDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetSalesTrend", ReplyAction="http://tempuri.org/AppsmainDomainService/GetSalesTrendResponse")]
            [WebGet()]
            IAsyncResult BeginGetSalesTrend(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSalesTrend'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSalesTrend'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSalesTrend' operation.</returns>
            QueryResult<SalesTrend> EndGetSalesTrend(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTrendsByCompanyID' operation.
            /// </summary>
            /// <param name="companyID">The value for the 'companyID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/GetTrendsByCompanyIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/GetTrendsByCompanyID", ReplyAction="http://tempuri.org/AppsmainDomainService/GetTrendsByCompanyIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetTrendsByCompanyID(int companyID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTrendsByCompanyID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTrendsByCompanyID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTrendsByCompanyID' operation.</returns>
            QueryResult<SalesTrend> EndGetTrendsByCompanyID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AppsmainDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AppsmainDomainService/SubmitChanges", ReplyAction="http://tempuri.org/AppsmainDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AppsmainDomainContextEntityContainer : EntityContainer
        {
            
            public AppsmainDomainContextEntityContainer()
            {
                this.CreateEntitySet<Activity>(EntitySetOperations.All);
                this.CreateEntitySet<Company>(EntitySetOperations.All);
                this.CreateEntitySet<Contact>(EntitySetOperations.All);
                this.CreateEntitySet<Customer>(EntitySetOperations.All);
                this.CreateEntitySet<Image>(EntitySetOperations.All);
                this.CreateEntitySet<Opportunity>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
                this.CreateEntitySet<SalesTrend>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'IncidentDomainService' DomainService.
    /// </summary>
    public sealed partial class IncidentDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentDomainContext"/> class.
        /// </summary>
        public IncidentDomainContext() : 
                this(new WebDomainClient<IIncidentDomainServiceContract>(new Uri("Procbel-Apps-Silverlight-Web-Services-IncidentDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The IncidentDomainService service URI.</param>
        public IncidentDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IIncidentDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public IncidentDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Code"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<Code> Codes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Code>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketAttachment"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketAttachment> TicketAttachments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketAttachment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketCategory"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketCategory> TicketCategories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketCategory>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketComment"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketComment> TicketComments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketComment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketEventNotification"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketEventNotification> TicketEventNotifications
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketEventNotification>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Ticket"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<Ticket> Tickets
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Ticket>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketStatus"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketStatus> TicketStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketStatus>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketTag"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketTag> TicketTags
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketTag>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TicketType"/> entity instances that have been loaded into this <see cref="IncidentDomainContext"/> instance.
        /// </summary>
        public EntitySet<TicketType> TicketTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TicketType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Code"/> entity instances using the 'GetCodes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Code"/> entity instances.</returns>
        public EntityQuery<Code> GetCodesQuery()
        {
            this.ValidateMethod("GetCodesQuery", null);
            return base.CreateQuery<Code>("GetCodes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketAttachment"/> entity instances using the 'GetTicketAttachments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketAttachment"/> entity instances.</returns>
        public EntityQuery<TicketAttachment> GetTicketAttachmentsQuery()
        {
            this.ValidateMethod("GetTicketAttachmentsQuery", null);
            return base.CreateQuery<TicketAttachment>("GetTicketAttachments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketCategory"/> entity instances using the 'GetTicketCategorySet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketCategory"/> entity instances.</returns>
        public EntityQuery<TicketCategory> GetTicketCategorySetQuery()
        {
            this.ValidateMethod("GetTicketCategorySetQuery", null);
            return base.CreateQuery<TicketCategory>("GetTicketCategorySet", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketComment"/> entity instances using the 'GetTicketComments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketComment"/> entity instances.</returns>
        public EntityQuery<TicketComment> GetTicketCommentsQuery()
        {
            this.ValidateMethod("GetTicketCommentsQuery", null);
            return base.CreateQuery<TicketComment>("GetTicketComments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketEventNotification"/> entity instances using the 'GetTicketEventNotifications' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketEventNotification"/> entity instances.</returns>
        public EntityQuery<TicketEventNotification> GetTicketEventNotificationsQuery()
        {
            this.ValidateMethod("GetTicketEventNotificationsQuery", null);
            return base.CreateQuery<TicketEventNotification>("GetTicketEventNotifications", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Ticket"/> entity instances using the 'GetTickets' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Ticket"/> entity instances.</returns>
        public EntityQuery<Ticket> GetTicketsQuery()
        {
            this.ValidateMethod("GetTicketsQuery", null);
            return base.CreateQuery<Ticket>("GetTickets", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketStatus"/> entity instances using the 'GetTicketStatusSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketStatus"/> entity instances.</returns>
        public EntityQuery<TicketStatus> GetTicketStatusSetQuery()
        {
            this.ValidateMethod("GetTicketStatusSetQuery", null);
            return base.CreateQuery<TicketStatus>("GetTicketStatusSet", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketTag"/> entity instances using the 'GetTicketTags' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketTag"/> entity instances.</returns>
        public EntityQuery<TicketTag> GetTicketTagsQuery()
        {
            this.ValidateMethod("GetTicketTagsQuery", null);
            return base.CreateQuery<TicketTag>("GetTicketTags", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TicketType"/> entity instances using the 'GetTicketTypeSet' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TicketType"/> entity instances.</returns>
        public EntityQuery<TicketType> GetTicketTypeSetQuery()
        {
            this.ValidateMethod("GetTicketTypeSetQuery", null);
            return base.CreateQuery<TicketType>("GetTicketTypeSet", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new IncidentDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'IncidentDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IIncidentDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCodes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetCodesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetCodes", ReplyAction="http://tempuri.org/IncidentDomainService/GetCodesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCodes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCodes' operation.</returns>
            QueryResult<Code> EndGetCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketAttachments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketAttachmentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketAttachments", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketAttachmentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketAttachments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketAttachments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketAttachments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketAttachments' operation.</returns>
            QueryResult<TicketAttachment> EndGetTicketAttachments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketCategorySet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketCategorySetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketCategorySet", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketCategorySetResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketCategorySet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketCategorySet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketCategorySet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketCategorySet' operation.</returns>
            QueryResult<TicketCategory> EndGetTicketCategorySet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketComments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketCommentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketComments", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketCommentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketComments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketComments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketComments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketComments' operation.</returns>
            QueryResult<TicketComment> EndGetTicketComments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketEventNotifications' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketEventNotificationsDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketEventNotifications", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketEventNotificationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketEventNotifications(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketEventNotifications'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketEventNotifications'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketEventNotifications' operation.</returns>
            QueryResult<TicketEventNotification> EndGetTicketEventNotifications(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTickets' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTickets", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTickets(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTickets'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTickets'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTickets' operation.</returns>
            QueryResult<Ticket> EndGetTickets(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketStatusSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketStatusSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketStatusSet", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketStatusSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketStatusSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketStatusSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketStatusSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketStatusSet' operation.</returns>
            QueryResult<TicketStatus> EndGetTicketStatusSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketTags' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketTagsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketTags", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketTagsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketTags(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketTags'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketTags'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketTags' operation.</returns>
            QueryResult<TicketTag> EndGetTicketTags(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTicketTypeSet' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/GetTicketTypeSetDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/GetTicketTypeSet", ReplyAction="http://tempuri.org/IncidentDomainService/GetTicketTypeSetResponse")]
            [WebGet()]
            IAsyncResult BeginGetTicketTypeSet(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTicketTypeSet'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTicketTypeSet'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTicketTypeSet' operation.</returns>
            QueryResult<TicketType> EndGetTicketTypeSet(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/IncidentDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/IncidentDomainService/SubmitChanges", ReplyAction="http://tempuri.org/IncidentDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class IncidentDomainContextEntityContainer : EntityContainer
        {
            
            public IncidentDomainContextEntityContainer()
            {
                this.CreateEntitySet<Code>(EntitySetOperations.None);
                this.CreateEntitySet<Ticket>(EntitySetOperations.All);
                this.CreateEntitySet<TicketAttachment>(EntitySetOperations.All);
                this.CreateEntitySet<TicketCategory>(EntitySetOperations.All);
                this.CreateEntitySet<TicketComment>(EntitySetOperations.All);
                this.CreateEntitySet<TicketEventNotification>(EntitySetOperations.All);
                this.CreateEntitySet<TicketStatus>(EntitySetOperations.All);
                this.CreateEntitySet<TicketTag>(EntitySetOperations.All);
                this.CreateEntitySet<TicketType>(EntitySetOperations.All);
            }
        }
    }
}
